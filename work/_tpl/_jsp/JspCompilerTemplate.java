/*
 * $RCSfile: JspCompilerTemplate.java,v $$
 * $Revision: 1.1 $
 * $Date: 2016-01-12 $
 *
 * Copyright (C) 2008 Skin, Inc. All rights reserved.
 *
 * This software is the proprietary information of Skin, Inc.
 * Use is subject to license terms.
 *
 * home: D:/workspace2/ayada/src/main/java/com/skin/ayada/compile
 * path: JspCompiler.java
 * lastModified: 2016-01-12 16:32:21 272
 * options: -fastJstl true
 * JSP generated by JspCompiler-1.0.1.2 (built 2016-01-12 16:32:34 810)
 */
package _tpl._jsp;

import java.io.Writer;
import com.skin.ayada.runtime.ExpressionContext;
import com.skin.ayada.runtime.JspWriter;
import com.skin.ayada.runtime.PageContext;
import com.skin.ayada.tagext.BodyContent;
import com.skin.ayada.tagext.BodyTag;
import com.skin.ayada.tagext.IterationTag;
import com.skin.ayada.tagext.JspFragment;
import com.skin.ayada.tagext.Tag;
import com.skin.ayada.template.JspTemplate;
import com.skin.ayada.util.ExpressionUtil;


/**
 * <p>Title: JspCompilerTemplate</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2006</p>
 * @author JspCompiler
 * @version 1.0
 */
@SuppressWarnings("unused")
public class JspCompilerTemplate extends JspTemplate {
    public static void main(String[] args){
        java.io.StringWriter writer = new java.io.StringWriter();
        PageContext pageContext = com.skin.ayada.runtime.JspFactory.getPageContext(writer);
        JspCompilerTemplate template = new JspCompilerTemplate();

        try {
            template.execute(pageContext);
            System.out.println(writer.toString());
        }
        catch(Throwable throwable) {
            throwable.printStackTrace();
        }
    }

    /**
     * @param pageContext
     * @throws Throwable
     */
    @Override
    @SuppressWarnings("unchecked")
    public void _execute(final PageContext pageContext) throws Throwable {
        JspWriter out = pageContext.getOut();
        JspWriter jspWriter = pageContext.getOut();
        ExpressionContext expressionContext = pageContext.getExpressionContext();
        // TEXT: lineNumber: 1
        // out.write("/*\r\n * $RCSfile: JspCompiler.java,v $$\r\n * $Revision: 1.1 $\r\n * $Date: 2013-11-08 $\r\n *\r\n * Copyright (C) 2008 Skin, Inc. All rights reserved.\r\n *\r\n * This software is the proprietary information of Skin, Inc.\r\n * Use is subject to license terms.\r\n */\r\npackage com.skin.ayada.compile;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.lang.reflect.Method;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport com.skin.ayada.Version;\r\nimport com.skin.ayada.io.CharBuffer;\r\nimport com.skin.ayada.io.ChunkWriter;\r\nimport com.skin.ayada.statement.Expression;\r\nimport com.skin.ayada.statement.Node;\r\nimport com.skin.ayada.statement.NodeType;\r\nimport com.skin.ayada.statement.TagNode;\r\nimport com.skin.ayada.statement.Variable;\r\nimport com.skin.ayada.tagext.BodyTag;\r\nimport com.skin.ayada.tagext.DynamicAttributes;\r\nimport com.skin.ayada.tagext.IterationTag;\r\nimport com.skin.ayada.tagext.SimpleTag;\r\nimport com.skin.ayada.tagext.Tag;\r\nimport com.skin.ayada.tagext.TryCatchFinally;\r\nimport com.skin.ayada.template.Template;\r\nimport com.skin.ayada.util.ClassUtil;\r\nimport com.skin.ayada.util.DateUtil;\r\nimport com.skin.ayada.util.ExpressionUtil;\r\nimport com.skin.ayada.util.HtmlUtil;\r\nimport com.skin.ayada.util.NodeUtil;\r\nimport com.skin.ayada.util.StringUtil;\r\nimport com.skin.ayada.util.TagUtil;\r\n\r\n/**\r\n * <p>Title: JspCompiler</p>\r\n * <p>Description: </p>\r\n * <p>Copyright: Copyright (c) 2006</p>\r\n * @author xuesong.net\r\n * @version 1.0\r\n */\r\npublic class JspCompiler {\r\n    private boolean fastJstl = true;\r\n    private static final String JAVA_TEMPLATE = JspCompiler.getJavaTemplate(\"class.jsp\");\r\n    private static final Logger logger = LoggerFactory.getLogger(JspCompiler.class);\r\n\r\n    public String compile(Template template, String className, String packageName) {\r\n        Date date = new Date();\r\n        String jspDirective = this.getJspDirective(template);\r\n        String jspDeclaration = this.getJspDeclaration(template);\r\n        String methodBody = this.getMethodBody(template);\r\n        String subClassBody = this.getSubClassBody(template);\r\n        String staticDeclaration = this.getStaticDeclaration(template);\r\n\r\n        Map<String, String> context = new HashMap<String, String>();\r\n        context.put(\"java.className\", className);\r\n        context.put(\"java.packageName\", packageName);\r\n        context.put(\"build.date\", DateUtil.format(date, \"yyyy-MM-dd\"));\r\n        context.put(\"build.time\", DateUtil.format(date, \"yyyy-MM-dd HH:mm:ss SSS\"));\r\n        context.put(\"template.home\", StringUtil.replace(template.getHome(), \"\\\\\", \"/\"));\r\n        context.put(\"template.path\", StringUtil.replace(template.getPath(), \"\\\\\", \"/\"));\r\n        context.put(\"template.lastModified\", DateUtil.format(template.getLastModified(), \"yyyy-MM-dd HH:mm:ss SSS\"));\r\n        context.put(\"options.fastJstl\", String.valueOf(this.fastJstl));\r\n        context.put(\"compiler.version\", Version.getVersion());\r\n        context.put(\"jsp.directive.import\", jspDirective);\r\n        context.put(\"jsp.declaration\", jspDeclaration);\r\n        context.put(\"jsp.method.body\", methodBody);\r\n        context.put(\"jsp.subclass.body\", subClassBody);\r\n        context.put(\"jsp.static.declaration\", staticDeclaration);\r\n        return this.replace(JAVA_TEMPLATE, context);\r\n    }\r\n\r\n    /**\r\n     * @param template\r\n     * @return String\r\n     */\r\n    public String getJspDirective(Template template) {\r\n        Node node = null;\r\n        List<Node> list = template.getNodes();\r\n        ChunkWriter chunkWriter = new ChunkWriter(4096);\r\n        PrintWriter writer = new PrintWriter(chunkWriter);\r\n\r\n        for(int index = 0, size = list.size(); index < size; index++) {\r\n            node = list.get(index);\r\n\r\n            if(node.getNodeType() == NodeType.JSP_DIRECTIVE_PAGE) {\r\n                if(node.getOffset() == index && node.getAttribute(\"import\") != null) {\r\n                    writer.println(\"import \" + node.getAttribute(\"import\") + \"; // jsp:directive.import: lineNumber: \" + node.getLineNumber());\r\n                }\r\n            }\r\n        }\r\n        writer.flush();\r\n        writer.close();\r\n        return chunkWriter.toString();\r\n    }\r\n\r\n    /**\r\n     * @param template\r\n     * @return String\r\n     */\r\n    public String getJspDeclaration(Template template) {\r\n        Node node = null;\r\n        List<Node> list = template.getNodes();\r\n        ChunkWriter chunkWriter = new ChunkWriter(4096);\r\n        PrintWriter writer = new PrintWriter(chunkWriter);\r\n\r\n        for(int index = 0, size = list.size(); index < size; index++) {\r\n            node = list.get(index);\r\n\r\n            if(node.getNodeType() == NodeType.JSP_DECLARATION) {\r\n                if(node.getOffset() == index) {\r\n                    writer.println(\"    // JSP_DECLARATION: lineNumber: \" + node.getLineNumber());\r\n                    writer.print(node.getTextContent());\r\n                }\r\n                else {\r\n                    writer.println(\"    // jsp:declaration END\");\r\n                    writer.println();\r\n                }\r\n            }\r\n        }\r\n        writer.flush();\r\n        writer.close();\r\n        return chunkWriter.toString();\r\n    }\r\n\r\n    /**\r\n     * @param template\r\n     * @return String\r\n     */\r\n    public String getStaticDeclaration(Template template) {\r\n        Node node = null;\r\n        List<Node> list = template.getNodes();\r\n        ChunkWriter chunkWriter = new ChunkWriter(4096);\r\n        PrintWriter writer = new PrintWriter(chunkWriter);\r\n\r\n        for(int index = 0, size = list.size(); index < size; index++) {\r\n            node = list.get(index);\r\n\r\n            if(node.getNodeType() == NodeType.TEXT) {\r\n                writer.print(\"    public static final char[] \" + this.getVariableName(node, \"_jsp_string_\"));\r\n                writer.print(\" = \\\"\");\r\n                writer.print(StringUtil.escape(node.getTextContent()));\r\n                writer.println(\"\\\".toCharArray();\");\r\n            }\r\n        }\r\n        writer.flush();\r\n        writer.close();\r\n        return chunkWriter.toString();\r\n    }\r\n\r\n    /**\r\n     * @param template\r\n     * @return String\r\n     */\r\n    public String getMethodBody(Template template) {\r\n        ChunkWriter chunkWriter = new ChunkWriter(8192);\r\n        PrintWriter writer = new PrintWriter(chunkWriter);\r\n        List<Node> list = template.getNodes();\r\n        this.writeBody(writer, list, 0, list.size());\r\n        return chunkWriter.toString();\r\n    }\r\n\r\n    /**\r\n     * @param template\r\n     * @return String\r\n     */\r\n    public String getSubClassBody(Template template) {\r\n        ChunkWriter chunkWriter = new ChunkWriter(8192);\r\n        PrintWriter writer = new PrintWriter(chunkWriter);\r\n        List<Node> list = template.getNodes();\r\n        this.writeClass(writer, list, 0, list.size());\r\n        return chunkWriter.toString();\r\n    }\r\n\r\n    /**\r\n     * @param list\r\n     * @param writer\r\n     * @param offset\r\n     * @param length\r\n     */\r\n    public void writeClass(PrintWriter writer, List<Node> list, int offset, int length) {\r\n        int nodeType = 0;\r\n        Node node = null;\r\n        String tagClassName = null;\r\n\r\n        for(int index = offset, end = offset + length; index < end; index++) {\r\n            node = list.get(index);\r\n            nodeType = node.getNodeType();\r\n\r\n            if(nodeType != NodeType.TAG_NODE) {\r\n                continue;\r\n            }\r\n\r\n            tagClassName = ((TagNode)node).getTagClassName();\r\n\r\n            if(index == node.getOffset() && this.isAssignableFrom(tagClassName, SimpleTag.class)) {\r\n                String tagInstanceName = this.getTagInstanceName(node);\r\n                String jspFragmentClassName = this.getVariableName(node, \"JspFragment_\");\r\n                writer.println();\r\n                writer.println(\"    // NODE START: lineNumber: \" + node.getLineNumber() + \", offset: \" + node.getOffset() + \", length: \" + node.getLength() + \", tagClassName: \" + tagClassName + \", tagInstanceName: \" + tagInstanceName);\r\n                writer.println(\"    // \" + NodeUtil.getDescription(node));\r\n                writer.println(\"    public class \" + jspFragmentClassName + \" extends com.skin.ayada.tagext.AbstractJspFragment {\");\r\n                writer.println(\"        @Override\");\r\n                writer.println(\"        public void execute(final JspWriter writer) throws Exception {\");\r\n                writer.println(\"            JspWriter out = writer;\");\r\n                writer.println(\"            PageContext pageContext = this.getPageContext();\");\r\n                writer.println(\"            ExpressionContext expressionContext = pageContext.getExpressionContext();\");\r\n                writer.println(\"            Tag \" + tagInstanceName + \" = this.getParent();\");\r\n                writer.println();\r\n                writer.println(\"            // offset: \" + (index + 1) + \", length: \" + (node.getLength() - 2));\r\n                this.writeBody(writer, list, index + 1, node.getLength() - 2);\r\n                writer.println(\"        }\");\r\n                writer.println(\"    }\");\r\n                writer.println(\"    // NODE END: lineNumber: \" + node.getLineNumber() + \", tagClassName: \" + tagClassName + \", tagInstanceName: \" + tagInstanceName);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param list\r\n     * @param offset\r\n     * @param length\r\n     */\r\n    public void writeBody(PrintWriter writer, List<Node> list, int offset, int length) {\r\n        int nodeType = 0;\r\n        Node node = null;\r\n        String indent = null;\r\n        String variable = null;\r\n\r\n        for(int index = offset, end = offset + length; index < end; index++) {\r\n            node = list.get(index);\r\n            indent = this.getIndent(node);\r\n            nodeType = node.getNodeType();\r\n\r\n            if(nodeType == NodeType.TEXT) {\r\n                variable = this.getVariableName(node, \"_jsp_string_\");\r\n                writer.println(indent + \"// TEXT: lineNumber: \" + node.getLineNumber());\r\n                writer.println(indent + \"// out.write(\\\"\" + StringUtil.escape(node.getTextContent()) + \"\\\");\");\r\n                writer.println(indent + \"out.write(\" + variable + \", 0, \" + variable + \".length);\");\r\n\r\n                if(this.isTagNode(list, index + 1)) {\r\n                    writer.println();\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if(nodeType == NodeType.VARIABLE) {\r\n                String textContent = node.getTextContent();\r\n                writer.println(indent + \"// VARIABLE: lineNumber: \" + node.getLineNumber());\r\n\r\n                if(\"#\".equals(((Variable)node).getFlag())) {\r\n                    writer.println(indent + \"out.write(pageContext.getAttribute(\\\"\" + textContent + \"\\\"));\");\r\n                }\r\n                else {\r\n                    writer.println(indent + \"expressionContext.print(out, pageContext.getAttribute(\\\"\" + textContent + \"\\\"));\");\r\n                }\r\n\r\n                if(this.isTagNode(list, index + 1)) {\r\n                    writer.println();\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if(nodeType == NodeType.EXPRESSION) {\r\n                String textContent = node.getTextContent();\r\n                writer.println(indent + \"// EXPRESSION: lineNumber: \" + node.getLineNumber());\r\n\r\n                if(\"#\".equals(((Expression)node).getFlag())) {\r\n                    writer.println(indent + \"out.write(expressionContext.getString(\\\"\" + StringUtil.escape(textContent) + \"\\\"));\");\r\n                }\r\n                else {\r\n                    writer.println(indent + \"expressionContext.print(out, expressionContext.getString(\\\"\" + StringUtil.escape(textContent) + \"\\\"));\");\r\n                }\r\n\r\n                if(this.isTagNode(list, index + 1)) {\r\n                    writer.println();\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if(node.getLength() == 0) {\r\n                throw new RuntimeException(\"Exception at line #\" + node.getLineNumber() + \" \" + NodeUtil.getDescription(node) + \" not match !\");\r\n            }\r\n\r\n            int flag = this.write(writer, node, index, indent);\r\n\r\n            if(flag == Tag.SKIP_BODY) {\r\n                index = node.getOffset() + node.getLength() - 2;\r\n            }\r\n            else {\r\n                if(node.getOffset() != index) {\r\n                    writer.println();\r\n                }\r\n            }\r\n        }\r\n        writer.flush();\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    public int write(PrintWriter writer, Node node, int index, String indent) {\r\n        /** Jsp Support */\r\n        int nodeType = node.getNodeType();\r\n\r\n        if(node.getOffset() == index) {\r\n            switch (nodeType) {\r\n                case NodeType.JSP_DECLARATION: {\r\n                    writer.println(indent + \"// jsp:declaration: lineNumber: \" + node.getLineNumber());\r\n                    writer.println(indent + \"// \" + NodeUtil.getDescription(node));\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_DIRECTIVE_PAGE: {\r\n                    writer.println(indent + \"// jsp:directive.page: lineNumber: \" + node.getLineNumber());\r\n                    writer.println(indent + \"// \" + NodeUtil.getDescription(node));\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_DIRECTIVE_TAGLIB: {\r\n                    writer.println(indent + \"// jsp:directive.taglib: lineNumber: \" + node.getLineNumber());\r\n                    writer.println(indent + \"// \" + NodeUtil.getDescription(node));\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_DIRECTIVE_INCLUDE: {\r\n                    writer.println(indent + \"// jsp:directive.include: lineNumber: \" + node.getLineNumber());\r\n                    writer.println(indent + \"// \" + NodeUtil.getDescription(node));\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_SCRIPTLET: {\r\n                    writer.println(indent + \"// jsp:scriptlet: lineNumber: \" + node.getLineNumber());\r\n                    writer.println(node.getTextContent());\r\n                    return Tag.SKIP_BODY;\r\n                }\r\n                case NodeType.JSP_EXPRESSION: {\r\n                    writer.println(indent + \"// jsp:expression: lineNumber: \" + node.getLineNumber());\r\n                    // writer.println(indent + \"out.print(\" + node.getTextContent() + \");\");\r\n                    writer.println(indent + \"expressionContext.print(out, (\" + node.getTextContent() + \"));\");\r\n                    return Tag.SKIP_BODY;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            switch (nodeType) {\r\n                case NodeType.JSP_DECLARATION: {\r\n                    // writer.println(indent + \"// jsp:declaration END\");\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_DIRECTIVE_PAGE: {\r\n                    // writer.println(indent + \"// jsp:directive.page END\");\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_DIRECTIVE_TAGLIB: {\r\n                    // writer.println(indent + \"// jsp:directive.taglib END\");\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_DIRECTIVE_INCLUDE: {\r\n                    // writer.println(indent + \"// jsp:directive.include END\");\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_SCRIPTLET: {\r\n                    writer.println(indent + \"// jsp:scriptlet END\");\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_EXPRESSION: {\r\n                    writer.println(indent + \"// jsp:expression END\");\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n            }\r\n        }\r\n\r\n        /** Tag Support */\r\n        String tagClassName = ((TagNode)node).getTagClassName();\r\n        String tagInstanceName = this.getTagInstanceName(node);\r\n\r\n        if(node.getOffset() == index) {\r\n            writer.println(indent + \"// NODE START: lineNumber: \" + node.getLineNumber() + \", offset: \" + node.getOffset() + \", length: \" + node.getLength() + \", tagClassName: \" + tagClassName + \", tagInstanceName: \" + tagInstanceName);\r\n            writer.println(indent + \"// \" + StringUtil.escape(NodeUtil.getDescription(node)));\r\n        }\r\n\r\n        int flag = Tag.EVAL_PAGE;\r\n\r\n        if(this.fastJstl && tagClassName.startsWith(\"com.skin.ayada.jstl.\")) {\r\n            if(tagClassName.endsWith(\".IfTag\")) {\r\n                flag = this.writeIfTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".SetTag\")) {\r\n                flag = this.writeSetTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".OutTag\")) {\r\n                flag = this.writeOutTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ForEachTag\")) {\r\n                flag = this.writeForEachTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ChooseTag\")) {\r\n                flag = this.writeChooseTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".WhenTag\")) {\r\n                flag = this.writeWhenTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".OtherwiseTag\")) {\r\n                flag = this.writeOtherwiseTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".CommentTag\")) {\r\n                flag = this.writeCommentTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".PrintTag\")) {\r\n                flag = this.writePrintTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".AttributeTag\")) {\r\n                flag = this.writeAttributeTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ElementTag\")) {\r\n                flag = this.writeElementTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ConstructorTag\")) {\r\n                flag = this.writeConstructorTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".PropertyTag\")) {\r\n                flag = this.writePropertyTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ParameterTag\")) {\r\n                flag = this.writePrameterTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ExecuteTag\")) {\r\n                flag = this.writeExecuteTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ExitTag\")) {\r\n                flag = this.writeExitTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".fmt.DateFormatTag\")) {\r\n                flag = this.writeFormatDateTag(writer, node, index, indent);\r\n            }\r\n            else {\r\n                flag = this.writeTag(writer, node, index, indent);\r\n            }\r\n        }\r\n        else {\r\n            flag = this.writeTag(writer, node, index, indent);\r\n        }\r\n\r\n        if(node.getOffset() != index) {\r\n            writer.println(indent + \"// NODE END: lineNumber: \" + node.getLineNumber() + \", tagClassName: \" + tagClassName + \", tagInstanceName: \" + tagInstanceName);\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeIfTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            writer.println(indent + \"if(ExpressionUtil.getBoolean(expressionContext, \\\"\" + StringUtil.escape(node.getAttribute(\"test\")) + \"\\\")) {\");\r\n        }\r\n        else {\r\n            writer.println(indent + \"} // jsp.jstl.core.IfTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeSetTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String name = node.getAttribute(\"var\");\r\n        String value = this.getValueExpression(node.getAttribute(\"value\"));\r\n        String target = this.getValueExpression(node.getAttribute(\"target\"));\r\n        String property = node.getAttribute(\"property\");\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                if(name != null) {\r\n                    writer.println(indent + \"pageContext.setAttribute(\\\"\" + name + \"\\\", \" + value + \");\");\r\n                }\r\n                else {\r\n                    if(target != null && property != null) {\r\n                        writer.println(indent + \"com.skin.ayada.util.ClassUtil.setProperty(\" + target + \", \\\"\" + property + \"\\\", \" + value + \");\");\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if(node.getLength() > 2) {\r\n                    writer.println(indent + \"out = pageContext.pushBody();\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if(value == null) {\r\n                if(node.getLength() > 2) {\r\n                    if(name != null) {\r\n                        writer.println(indent + \"pageContext.setAttribute(\\\"\" + name + \"\\\", ((BodyContent)out).getString().trim());\");\r\n                    }\r\n                    else {\r\n                        if(target != null && property != null) {\r\n                            writer.println(indent + \"com.skin.ayada.util.ClassUtil.setProperty(\" + target + \", \\\"\" + property + \"\\\", ((BodyContent)out).getString().trim());\");\r\n                        }\r\n                    }\r\n                    writer.println(indent + \"out = pageContext.popBody();\");\r\n                }\r\n                else {\r\n                    if(name != null) {\r\n                        writer.println(indent + \"pageContext.setAttribute(\\\"\" + name + \"\\\", \\\"\\\");\");\r\n                    }\r\n                    else {\r\n                        if(target != null && property != null) {\r\n                            writer.println(indent + \"com.skin.ayada.util.ClassUtil.setProperty(\" + target + \", \\\"\" + property + \"\\\", \\\"\\\");\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            writer.println(indent + \"// jsp.jstl.core.SetTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeOutTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String value = node.getAttribute(\"value\");\r\n        boolean escapeXml = \"true\".equals(node.getAttribute(\"escapeXml\"));\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                writer.println(indent + \"com.skin.ayada.jstl.core.OutTag.write(out, \" + this.getValueExpression(value) + \", \" + escapeXml + \");\");\r\n                 writer.println(indent + \"// out.print(\" + this.getStringExpression(value, escapeXml) + \");\");\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            else if(node.getLength() > 2) {\r\n                writer.println(indent + \"out = pageContext.pushBody();\");\r\n            }\r\n            return Tag.EVAL_PAGE;\r\n        }\r\n\r\n        if(value == null && node.getLength() > 2) {\r\n            writer.println(indent + \"pageContext.print((BodyContent)out, \" + escapeXml + \");\");\r\n            writer.println(indent + \"out = pageContext.popBody();\");\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.OutTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeForEachTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String tagClassName = ((TagNode)node).getTagClassName();\r\n        String tagInstanceName = this.getTagInstanceName(node);\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n        String forEachOldVar = this.getVariableName(node, \"_jsp_old_var_\");\r\n        String forEachOldVarStatus = this.getVariableName(node, \"_jsp_old_var_status_\");\r\n\r\n        if(node.getOffset() == index) {\r\n            String items = node.getAttribute(\"items\");\r\n            String variable = node.getAttribute(\"var\");\r\n            String begin = node.getAttribute(\"begin\");\r\n            String step = node.getAttribute(\"step\");\r\n            String end = node.getAttribute(\"end\");\r\n            String varStatus = node.getAttribute(\"varStatus\");\r\n            boolean hasParent = this.hasParent(node);\r\n\r\n            if(variable != null && variable.trim().length() > 0) {\r\n                writer.println(indent + \"Object \" + forEachOldVar + \" = pageContext.getAttribute(\\\"\" + variable.trim() + \"\\\");\");\r\n            }\r\n\r\n            if(varStatus != null && varStatus.trim().length() > 0) {\r\n                writer.println(indent + \"Object \" + forEachOldVarStatus + \" = pageContext.getAttribute(\\\"\" + varStatus.trim() + \"\\\");\");\r\n            }\r\n\r\n            writer.println(indent + tagClassName + \" \" + tagInstanceName + \" = new \" + tagClassName + \"();\");\r\n\r\n            if(hasParent) {\r\n                writer.println(indent + tagInstanceName + \".setParent(\" + parentTagInstanceName + \");\");\r\n            }\r\n            else {\r\n                writer.println(indent + tagInstanceName + \".setParent((Tag)null);\");\r\n            }\r\n\r\n            writer.println(indent + tagInstanceName + \".setPageContext(pageContext);\");\r\n\r\n            if(variable != null) {\r\n                writer.println(indent + tagInstanceName + \".setVar(\\\"\" + StringUtil.escape(variable) + \"\\\");\");\r\n            }\r\n\r\n            if(items != null) {\r\n                if(items.indexOf(\"");
        out.write(_jsp_string_1, 0, _jsp_string_1.length);
        // EXPRESSION: lineNumber: 620
        expressionContext.print(out, expressionContext.getString("\") > -1) {\r\n                    String varItems = this.getVariable(items);\r\n\r\n                    if(varItems != null) {\r\n                        writer.println(indent + tagInstanceName + \".setItems(pageContext.getAttribute(\\\"\" + varItems + \"\\\"));\");"));
        // TEXT: lineNumber: 620
        // out.write("\r\n                    else {\r\n                        writer.println(indent + tagInstanceName + \".setItems(ExpressionUtil.evaluate(expressionContext, \\\"\" + StringUtil.escape(items) + \"\\\", null));\");\r\n                    }\r\n                }\r\n                else {\r\n                    writer.println(indent + tagInstanceName + \".setItems(\\\"\" + StringUtil.escape(items) + \"\\\");\");\r\n                }\r\n            }\r\n\r\n            if(begin != null && end != null) {\r\n                if(begin.indexOf(\"");
        out.write(_jsp_string_3, 0, _jsp_string_3.length);
        // EXPRESSION: lineNumber: 631
        expressionContext.print(out, expressionContext.getString("\") < 0) {\r\n                    Object beginValue = ExpressionUtil.getValue(begin);\r\n                    if((beginValue instanceof String) == false) {\r\n                        writer.println(indent + tagInstanceName + \".setBegin(\" + begin + \");\");"));
        // TEXT: lineNumber: 631
        // out.write("\r\n                }\r\n                else {\r\n                    writer.println(indent + tagInstanceName + \".setBegin(ExpressionUtil.getInteger(expressionContext, \\\"\" + begin + \"\\\"));\");\r\n                }\r\n\r\n                if(end.indexOf(\"");
        out.write(_jsp_string_5, 0, _jsp_string_5.length);
        // EXPRESSION: lineNumber: 637
        expressionContext.print(out, expressionContext.getString("\") < 0) {\r\n                    Object endValue = ExpressionUtil.getValue(end);\r\n                    if((endValue instanceof String) == false) {\r\n                        writer.println(indent + tagInstanceName + \".setEnd(\" + end + \");\");"));
        // TEXT: lineNumber: 637
        // out.write("\r\n                }\r\n                else {\r\n                    writer.println(indent + tagInstanceName + \".setEnd(ExpressionUtil.getInteger(expressionContext, \\\"\" + end + \"\\\"));\");\r\n                }\r\n            }\r\n\r\n            if(step != null) {\r\n                if(step.indexOf(\"");
        out.write(_jsp_string_7, 0, _jsp_string_7.length);
        // EXPRESSION: lineNumber: 645
        expressionContext.print(out, expressionContext.getString("\") < 0) {\r\n                    Object stepValue = ExpressionUtil.getValue(step);\r\n\r\n                    if((stepValue instanceof String) == false) {\r\n                        writer.println(indent + tagInstanceName + \".setStep(\" + step + \");\");"));
        // TEXT: lineNumber: 645
        // out.write("\r\n                }\r\n                else {\r\n                    writer.println(indent + tagInstanceName + \".setStep(ExpressionUtil.getInteger(expressionContext, \\\"\" + step + \"\\\"));\");\r\n                }\r\n            }\r\n\r\n            if(varStatus != null) {\r\n                writer.println(indent + tagInstanceName + \".setVarStatus(\\\"\" + varStatus + \"\\\");\");\r\n            }\r\n            writer.println(indent + \"if(\" + tagInstanceName + \".doStartTag() != Tag.SKIP_BODY) {\");\r\n            writer.println(indent + \"    while(true) {\");\r\n        }\r\n        else {\r\n            String variable = node.getAttribute(\"var\");\r\n            String varStatus = node.getAttribute(\"varStatus\");\r\n            writer.println(indent + \"        if(\" + tagInstanceName + \".doAfterBody() != IterationTag.EVAL_BODY_AGAIN) {\");\r\n            writer.println(indent + \"            break;\");\r\n            writer.println(indent + \"        }\");\r\n            writer.println(indent + \"    }\");\r\n            writer.println(indent + \"}\");\r\n            writer.println(indent + tagInstanceName + \".release();\");\r\n\r\n            if(variable != null && variable.trim().length() > 0) {\r\n                writer.println(indent + \"pageContext.setAttribute(\\\"\" + variable.trim() + \"\\\", \" + forEachOldVar + \");\");\r\n            }\r\n\r\n            if(varStatus != null && varStatus.trim().length() > 0) {\r\n                writer.println(indent + \"pageContext.setAttribute(\\\"\" + varStatus.trim() + \"\\\", \" + forEachOldVarStatus + \");\");\r\n            }\r\n            writer.println(indent + \"// jsp.jstl.core.ForEachTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeChooseTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String tagInstanceName = this.getTagInstanceName(node);\r\n            writer.println(indent + \"boolean \" + tagInstanceName + \" = true;\");\r\n            writer.println();\r\n        }\r\n        else {\r\n            writer.println(indent + \"// jsp.jstl.core.ChooseTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeWhenTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n            writer.println(indent + \"if(\" + parentTagInstanceName + \" && ExpressionUtil.getBoolean(expressionContext, \\\"\" + StringUtil.escape(node.getAttribute(\"test\")) + \"\\\")) {\");\r\n            writer.println(indent + \"    \" + parentTagInstanceName + \" = false;\");\r\n        }\r\n        else {\r\n            writer.println(indent + \"} // jsp.jstl.core.WhenTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeOtherwiseTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n            writer.println(indent + \"if(\" + parentTagInstanceName + \") {\");\r\n            writer.println(indent + \"    \" + parentTagInstanceName + \" = false;\");\r\n        }\r\n        else {\r\n            writer.println(indent + \"} // jsp.jstl.core.OtherwiseTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeFormatDateTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String tagClassName = ((TagNode)node).getTagClassName();\r\n            String tagInstanceName = this.getTagInstanceName(node);\r\n            String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n            boolean hasParent = this.hasParent(node);\r\n\r\n            writer.println(indent + tagClassName + \" \" + tagInstanceName + \" = new \" + tagClassName + \"();\");\r\n\r\n            if(hasParent) {\r\n                writer.println(indent + tagInstanceName + \".setParent(\" + parentTagInstanceName + \");\");\r\n            }\r\n            else {\r\n                writer.println(indent + tagInstanceName + \".setParent((Tag)null);\");\r\n            }\r\n            writer.println(indent + tagInstanceName + \".setPageContext(pageContext);\");\r\n            this.setAttributes(indent, tagClassName, tagInstanceName, node.getAttributes(), writer);\r\n            writer.println(indent + tagInstanceName + \".doStartTag();\");\r\n            writer.println(indent + tagInstanceName + \".doEndTag();\");\r\n            writer.println(indent + tagInstanceName + \".release();\");\r\n        }\r\n        else {\r\n            writer.println(indent + \"// jsp.jstl.fmt.FormatDateTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeCommentTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            writer.println(indent + \"if(com.skin.ayada.jstl.core.ContinueTag.getTrue()) {\");\r\n        }\r\n        else {\r\n            writer.println(indent + \"} // jsp.jstl.core.CommentTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writePrintTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String out = node.getAttribute(\"out\");\r\n            String value = node.getAttribute(\"value\");\r\n\r\n            if(out == null || out.trim().length() < 1) {\r\n                out = \"null\";\r\n            }\r\n            else {\r\n                out = \"ExpressionUtil.evaluate(expressionContext, \\\"\" + StringUtil.escape(out) + \"\\\", null)\";\r\n            }\r\n            writer.println(indent + \"com.skin.ayada.jstl.core.PrintTag.print(pageContext, \" + out + \", \" + this.getValueExpression(value) + \");\");\r\n        }\r\n        else {\r\n            writer.println(indent + \"// jsp.jstl.core.PrintTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeAttributeTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String name = node.getAttribute(\"name\");\r\n        String value = node.getAttribute(\"value\");\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                if(name != null) {\r\n                    writer.println(indent + parentTagInstanceName + \".setAttribute(\\\"\" + name + \"\\\", \" + this.getValueExpression(value) + \");\");\r\n                }\r\n                else {\r\n                    writer.println(indent + parentTagInstanceName + \".setAttribute((String)null, \" + this.getValueExpression(value) + \");\");\r\n                }\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            else if(node.getLength() > 2) {\r\n                writer.println(indent + \"out = pageContext.pushBody();\");\r\n            }\r\n            return Tag.EVAL_PAGE;\r\n        }\r\n\r\n        if(value == null && node.getLength() > 2) {\r\n            if(name != null) {\r\n                writer.println(indent + parentTagInstanceName + \".setAttribute(\\\"\" + name + \"\\\", ((BodyContent)out).getString());\");\r\n            }\r\n            else {\r\n                writer.println(indent + parentTagInstanceName + \".setAttribute((String)null, ((BodyContent)out).getString());\");\r\n            }\r\n            writer.println(indent + \"out = pageContext.popBody();\");\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.AttributeTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeElementTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String indek = node.getAttribute(\"index\");\r\n        String value = node.getAttribute(\"value\");\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                if(indek != null) {\r\n                    writer.println(indent + parentTagInstanceName + \".setElement(\" + indek + \", \" + this.getValueExpression(value) + \");\");\r\n                }\r\n                else {\r\n                    writer.println(indent + parentTagInstanceName + \".addElement(\" + this.getValueExpression(value) + \");\");\r\n                }\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            else if(node.getLength() > 2) {\r\n                writer.println(indent + \"out = pageContext.pushBody();\");\r\n            }\r\n            return Tag.EVAL_PAGE;\r\n        }\r\n        if(value == null && node.getLength() > 2) {\r\n            if(indek != null) {\r\n                writer.println(indent + parentTagInstanceName + \".setElement(\" + indek + \", ((BodyContent)out).getString());\");\r\n            }\r\n            else {\r\n                writer.println(indent + parentTagInstanceName + \".addElement(((BodyContent)out).getString());\");\r\n            }\r\n            writer.println(indent + \"out = pageContext.popBody();\");\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.ElementTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeConstructorTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String name = node.getAttribute(\"type\");\r\n        String value = node.getAttribute(\"value\");\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                writer.println(indent + \"com.skin.ayada.jstl.core.ConstructorTag.setArgument(\" + parentTagInstanceName + \", \\\"\" + name + \"\\\", \" + this.getValueExpression(value) + \");\");\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            return Tag.EVAL_PAGE;\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.ConstructorTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writePropertyTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String name = node.getAttribute(\"name\");\r\n        String value = node.getAttribute(\"value\");\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                writer.println(indent + parentTagInstanceName + \".setProperty(\\\"\" + name + \"\\\", \" + this.getValueExpression(value) + \");\");\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            else if(node.getLength() > 2) {\r\n                writer.println(indent + \"out = pageContext.pushBody();\");\r\n            }\r\n            return Tag.EVAL_PAGE;\r\n        }\r\n        if(value == null && node.getLength() > 2) {\r\n            writer.println(indent + parentTagInstanceName + \".setProperty(\\\"\" + name + \"\\\", ((BodyContent)out).getString());\");\r\n            writer.println(indent + \"out = pageContext.popBody();\");\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.PropertyTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writePrameterTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String name = node.getAttribute(\"name\");\r\n        String value = node.getAttribute(\"value\");\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                writer.println(indent + parentTagInstanceName + \".setParameter(\\\"\" + name + \"\\\", \" + this.getStringExpression(value, false) + \");\");\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            else if(node.getLength() > 2) {\r\n                writer.println(indent + \"out = pageContext.pushBody();\");\r\n            }\r\n            return Tag.EVAL_PAGE;\r\n        }\r\n        if(value == null && node.getLength() > 2) {\r\n            writer.println(indent + parentTagInstanceName + \".setParameter(\\\"\" + name + \"\\\", ((BodyContent)out).getString());\");\r\n            writer.println(indent + \"out = pageContext.popBody();\");\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.PrameterTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeExecuteTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String name = node.getAttribute(\"var\");\r\n            String value = this.getValueExpression(node.getAttribute(\"value\"));\r\n\r\n            if(name != null) {\r\n                writer.println(indent + \"pageContext.setAttribute(\\\"\" + name + \"\\\", \" + value + \");\");\r\n            }\r\n            else {\r\n                writer.println(indent + value + \";\");\r\n            }\r\n        }\r\n        else {\r\n            writer.println(indent + \"// jsp.jstl.core.ExecuteTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeExitTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String test = node.getAttribute(\"test\");\r\n\r\n            if(test != null) {\r\n                writer.println(indent + \"if(ExpressionUtil.getBoolean(expressionContext, \\\"\" + StringUtil.escape(node.getAttribute(\"test\")) + \"\\\")) {\");\r\n            }\r\n            else {\r\n                writer.println(indent + \"if(com.skin.ayada.jstl.core.ContinueTag.getTrue()) {\");\r\n            }\r\n            writer.println(indent + \"    return;\");\r\n            writer.println(indent + \"}\");\r\n            return Tag.SKIP_BODY;\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.ExitTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String tagClassName = ((TagNode)node).getTagClassName();\r\n        String tagInstanceName = this.getTagInstanceName(node);\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n        String startFlagName = this.getVariableName(node, \"_jsp_start_flag_\");\r\n        String flagName = this.getVariableName(node, \"_jsp_flag_\");\r\n        String bodyContentInstanceName = this.getVariableName(node, \"_jsp_body_content_\");\r\n        boolean hasParent = this.hasParent(node);\r\n        boolean isTryCatchFinallyTag = this.isAssignableFrom(tagClassName, TryCatchFinally.class);\r\n        String prefix = indent;\r\n\r\n        if(node.getOffset() == index) {\r\n            writer.println(prefix + tagClassName + \" \" + tagInstanceName + \" = new \" + tagClassName + \"();\");\r\n\r\n            if(isTryCatchFinallyTag) {\r\n                writer.println(prefix + \"try {\");\r\n                prefix = prefix + \"    \";\r\n            }\r\n\r\n            writer.println(prefix + tagInstanceName + \".setPageContext(pageContext);\");\r\n\r\n            if(hasParent) {\r\n                writer.println(prefix + tagInstanceName + \".setParent(\" + parentTagInstanceName + \");\");\r\n            }\r\n            else {\r\n                writer.println(prefix + tagInstanceName + \".setParent((Tag)null);\");\r\n            }\r\n\r\n            this.setAttributes(prefix, tagClassName, tagInstanceName, node.getAttributes(), writer);\r\n\r\n            if(this.isAssignableFrom(tagClassName, SimpleTag.class)) {\r\n                String jspFragmentClassName = this.getVariableName(node, \"JspFragment_\");\r\n                String jspFragmentInstanceName = this.getVariableName(node, \"_jsp_fragment_\");\r\n                writer.println();\r\n                writer.println(prefix + jspFragmentClassName + \" \" + jspFragmentInstanceName + \" = new \" + jspFragmentClassName + \"();\");\r\n                writer.println(prefix + jspFragmentInstanceName + \".setPageContext(pageContext);\");\r\n                writer.println(prefix + jspFragmentInstanceName + \".setParent(\" + tagInstanceName + \");\");\r\n                writer.println();\r\n                writer.println(prefix + tagInstanceName + \".setJspBody(\" + jspFragmentInstanceName + \");\");\r\n                writer.println(prefix + tagInstanceName + \".doTag();\");\r\n                writer.println(prefix + tagInstanceName+ \".release();\");\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            else {\r\n                writer.println(prefix + \"int \" + startFlagName + \" = \" + tagInstanceName + \".doStartTag();\");\r\n                writer.println();\r\n                writer.println(prefix + \"if(\" + startFlagName + \" == Tag.SKIP_PAGE) {\");\r\n                writer.println(prefix + \"    return;\");\r\n                writer.println(prefix + \"}\");\r\n                writer.println(prefix + \"if(\" + startFlagName + \" != Tag.SKIP_BODY) {\");\r\n\r\n                if(node.getLength() > 2) {\r\n                    writer.println(prefix + \"    int \" + flagName + \" = 0;\");\r\n\r\n                    if(this.isAssignableFrom(tagClassName, BodyTag.class)) {\r\n                        writer.println(prefix + \"    if(\" + startFlagName + \" == BodyTag.EVAL_BODY_BUFFERED) {\");\r\n                        writer.println(prefix + \"        BodyContent \" + bodyContentInstanceName + \" = pageContext.pushBody();\");\r\n                        writer.println(prefix + \"        \" + tagInstanceName + \".setBodyContent(\" + bodyContentInstanceName + \");\");\r\n                        writer.println(prefix + \"        \" + tagInstanceName + \".doInitBody();\");\r\n                        writer.println(prefix + \"        out = \" + bodyContentInstanceName + \";\");\r\n                        writer.println(prefix + \"    }\");\r\n                    }\r\n\r\n                    writer.println();\r\n                    writer.println(prefix + \"    do {\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if(isTryCatchFinallyTag) {\r\n                prefix = prefix + \"    \";\r\n            }\r\n\r\n            if(this.isAssignableFrom(tagClassName, SimpleTag.class)) {\r\n            }\r\n            else {\r\n                if(node.getLength() > 2) {\r\n                    if(this.isAssignableFrom(tagClassName, IterationTag.class)) {\r\n                        writer.println(prefix + \"        \" + flagName + \" = \" + tagInstanceName + \".doAfterBody();\");\r\n                    }\r\n\r\n                    writer.println(prefix + \"    }\");\r\n                    writer.println(prefix + \"    while(\" + flagName + \" == IterationTag.EVAL_BODY_AGAIN);\");\r\n\r\n                    if(this.isAssignableFrom(tagClassName, BodyTag.class)) {\r\n                        writer.println(prefix + \"    if(\" + startFlagName + \" == BodyTag.EVAL_BODY_BUFFERED) {\");\r\n                        writer.println(prefix + \"        out = pageContext.popBody();\");\r\n                        writer.println(prefix + \"    }\");\r\n                    }\r\n                }\r\n                else {\r\n                    if(this.isAssignableFrom(tagClassName, IterationTag.class)) {\r\n                        writer.println(prefix + \"    \" + tagInstanceName + \".doAfterBody();\");\r\n                    }\r\n                }\r\n                writer.println(prefix + \"}\");\r\n                writer.println(prefix + tagInstanceName+ \".doEndTag();\");\r\n                writer.println(prefix + tagInstanceName + \".release();\");\r\n            }\r\n\r\n            if(isTryCatchFinallyTag) {\r\n                prefix = prefix.substring(4);\r\n                writer.println(prefix + \"}\");\r\n                writer.println(prefix + \"catch(Throwable throwable) {\");\r\n                writer.println(prefix + \"    try {\");\r\n                writer.println(prefix + \"        \" + tagInstanceName + \".doCatch(throwable);\");\r\n                writer.println(prefix + \"    } catch (Throwable t) {\");\r\n                writer.println(prefix + \"        throw new Exception(t);\");\r\n                writer.println(prefix + \"    }\");\r\n                writer.println(prefix + \"}\");\r\n                writer.println(prefix + \"finally {\");\r\n                writer.println(prefix + \"    \" + tagInstanceName + \".doFinally();\");\r\n                writer.println(prefix + \"}\");\r\n            }\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param expression\r\n     * @return boolean\r\n     */\r\n    protected String getVariable(String expression) {\r\n        List<Node> nodes = ExpressionUtil.parse(expression);\r\n\r\n        if(nodes.size() == 1) {\r\n            Node node = nodes.get(0);\r\n\r\n            if(node instanceof Expression && this.isJavaIdentifier(node.getTextContent())) {\r\n                return node.getTextContent();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param expression\r\n     * @return boolean\r\n     */\r\n    protected boolean isVariable(String expression) {\r\n        List<Node> nodes = ExpressionUtil.parse(expression);\r\n\r\n        if(nodes.size() == 1) {\r\n            Node node = nodes.get(0);\r\n\r\n            if(node instanceof Expression) {\r\n                return this.isJavaIdentifier(node.getTextContent());\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param source\r\n     * @return boolean\r\n     */\r\n    protected boolean isJavaIdentifier(String source) {\r\n        if(Character.isJavaIdentifierStart(source.charAt(0)) == false) {\r\n            return false;\r\n        }\r\n\r\n        for(int i = 0; i < source.length(); i++) {\r\n            if(Character.isJavaIdentifierPart(source.charAt(i)) == false) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param list\r\n     * @param index\r\n     * @return boolean\r\n     */\r\n    protected boolean isTagNode(List<Node> list, int index) {\r\n        if(index < list.size()) {\r\n            Node node = list.get(index);\r\n            int nodeType = node.getNodeType();\r\n\r\n            if(nodeType != NodeType.TEXT && nodeType != NodeType.VARIABLE && nodeType != NodeType.EXPRESSION) {\r\n                if(node.getOffset() == index) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param node\r\n     * @return boolean\r\n     */\r\n    protected boolean hasParent(Node node) {\r\n        Node parent = node.getParent();\r\n\r\n        if(this.fastJstl == false) {\r\n            return (parent != null);\r\n        }\r\n\r\n        if(parent != null && parent instanceof TagNode) {\r\n            String className = ((TagNode)parent).getTagClassName();\r\n            return (FastJstl.has(className) == false);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param indent\r\n     * @param tagClassName\r\n     * @param tagInstanceName\r\n     * @param attributes\r\n     * @param writer\r\n     */\r\n    protected void setAttributes(String indent, String tagClassName, String tagInstanceName, Map<String, String> attributes, PrintWriter writer) {\r\n        if(attributes == null || attributes.size() < 1) {\r\n            return;\r\n        }\r\n\r\n        if(this.isAssignableFrom(tagClassName, DynamicAttributes.class)) {\r\n            for(Map.Entry<String, String> entry : attributes.entrySet()) {\r\n                String name = entry.getKey();\r\n                String value = entry.getValue();\r\n\r\n                if(value.indexOf(\"");
        out.write(_jsp_string_9, 0, _jsp_string_9.length);
        // EXPRESSION: lineNumber: 1258
        expressionContext.print(out, expressionContext.getString("\") < 0) {\r\n                    String valueExpression = this.getValueExpression(value);\r\n                    writer.println(indent + tagInstanceName + \".setDynamicAttribute(\\\"\" + name + \"\\\", \" + valueExpression + \");\");"));
        // TEXT: lineNumber: 1258
        // out.write("\r\n                else {\r\n                    String valueExpression = this.getValueExpression(value);\r\n                    writer.println(indent + tagInstanceName + \".setDynamicAttribute(\\\"\" + name + \"\\\", \" + valueExpression + \");\");\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        try {\r\n            Class<?> clazz = ClassUtil.getClass(tagClassName);\r\n\r\n            for(Map.Entry<String, String> entry : attributes.entrySet()) {\r\n                String name = entry.getKey();\r\n                String value = entry.getValue();\r\n                String methodName = \"set\" + Character.toUpperCase(name.charAt(0)) + name.substring(1);\r\n                Method method = TagUtil.getSetMethod(clazz, methodName);\r\n\r\n                if(method != null) {\r\n                    Class<?>[] parameterTypes = method.getParameterTypes();\r\n                    Class<?> parameterType = parameterTypes[0];\r\n                    Object parameterValue = null;\r\n\r\n                    /**\r\n                     * constant\r\n                     */\r\n                    if(value.indexOf(\"");
        out.write(_jsp_string_11, 0, _jsp_string_11.length);
        // EXPRESSION: lineNumber: 1284
        expressionContext.print(out, expressionContext.getString("\") < 0) {\r\n                        parameterValue = ExpressionUtil.getValue(value);\r\n\r\n                        if(parameterType == char.class || parameterType == Character.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\'\" + StringUtil.escape(value).charAt(0) + \"\');\");"));
        // TEXT: lineNumber: 1284
        // out.write("\r\n                        else if(parameterType == boolean.class || parameterType == Boolean.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\" + parameterValue.toString() + \");\");\r\n                        }\r\n                        else if(parameterType == byte.class || parameterType == Byte.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"((byte)\" + ((Number)parameterValue).intValue() + \");\");\r\n                        }\r\n                        else if(parameterType == short.class || parameterType == Short.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"((short)\" + ((Number)parameterValue).intValue() + \");\");\r\n                        }\r\n                        else if(parameterType == int.class || parameterType == Integer.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\" + ((Number)parameterValue).intValue() + \");\");\r\n                        }\r\n                        else if(parameterType == float.class || parameterType == Float.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\" + ((Number)parameterValue).floatValue() + \"f);\");\r\n                        }\r\n                        else if(parameterType == double.class || parameterType == Double.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\" + ((Number)parameterValue).doubleValue() + \"d);\");\r\n                        }\r\n                        else if(parameterType == long.class || parameterType == Long.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\" + ((Number)parameterValue).longValue() + \"L);\");\r\n                        }\r\n                        else if(parameterType == String.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\\\"\" + StringUtil.escape(value) + \"\\\");\");\r\n                        }\r\n                        else if(parameterType == Object.class) {\r\n                            if(parameterValue instanceof Number) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(\" + parameterValue.toString() + \");\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(\\\"\" + StringUtil.escape(value) + \"\\\");\");\r\n                            }\r\n                        }\r\n                        else {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\\\"\" + StringUtil.escape(value) + \"\\\");\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        /**\r\n                         * expression\r\n                         */\r\n                        String variable = this.getVariable(value);\r\n\r\n                        if(parameterType == char.class || parameterType == Character.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getString(\\\"\" + variable + \"\\\").charAt(0));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getString(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\").charAt(0));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == boolean.class || parameterType == Boolean.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getBoolean(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getBoolean(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == byte.class || parameterType == Byte.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getByte(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getByte(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == short.class || parameterType == Short.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getShort(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getShort(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == int.class || parameterType == Integer.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getInteger(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getInteger(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == float.class || parameterType == Float.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getFloat(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getFloat(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == double.class || parameterType == Double.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getDouble(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getDouble(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == long.class || parameterType == Long.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getLong(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getLong(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == String.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getString(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getString(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == Object.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getAttribute(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.evaluate(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\", \" + parameterType.getName() + \".class));\");\r\n                            }\r\n                        }\r\n                        else {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getValue(\\\"\" + variable + \"\\\", \" + parameterType.getName() + \".class));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"((\" + parameterType.getName() + \")(ExpressionUtil.evaluate(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\", \" + parameterType.getName() + \".class)));\");\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch(ClassNotFoundException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param tagClassName\r\n     * @param parent\r\n     * @return boolean\r\n     */\r\n    protected boolean isAssignableFrom(String tagClassName, Class<?> parent) {\r\n        try {\r\n            Class<?> clazz = ClassUtil.getClass(tagClassName);\r\n            return parent.isAssignableFrom(clazz);\r\n        }\r\n        catch(ClassNotFoundException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param node\r\n     * @return String\r\n     */\r\n    protected String getIndent(Node node) {\r\n        Node parent = node;\r\n        int indent = 2;\r\n        StringBuilder buffer = new StringBuilder();\r\n\r\n        if(this.fastJstl) {\r\n            while(parent != null && (parent = parent.getParent()) != null) {\r\n                String tagClassName = ((TagNode)parent).getTagClassName();\r\n\r\n                if(tagClassName.equals(\"com.skin.ayada.jstl.core.ImportTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.IfTag\")) {\r\n                    indent += 1;\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.SetTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.OutTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.ForEachTag\")) {\r\n                    indent += 2;\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.ChooseTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.WhenTag\")) {\r\n                    indent += 1;\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.OtherwiseTag\")) {\r\n                    indent += 1;\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.CommentTag\")) {\r\n                    indent += 1;\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.AttributeTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.PropertyTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.PrintTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.fmt.DateFormatTag\")) {\r\n                }\r\n                else {\r\n                    indent += 2;\r\n\r\n                    if(this.isAssignableFrom(tagClassName, SimpleTag.class)) {\r\n                        indent -= 1;\r\n                        break;\r\n                    }\r\n\r\n                    if(this.isAssignableFrom(tagClassName, TryCatchFinally.class)) {\r\n                      indent += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            while(parent != null && (parent = parent.getParent()) != null) {\r\n                indent += 2;\r\n                String tagClassName = ((TagNode)parent).getTagClassName();\r\n\r\n                if(this.isAssignableFrom(tagClassName, SimpleTag.class)) {\r\n                    indent -= 1;\r\n                    break;\r\n                }\r\n\r\n                if(this.isAssignableFrom(tagClassName, TryCatchFinally.class)) {\r\n                    indent += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        for(int i = 0; i < indent; i++) {\r\n            buffer.append(\"    \");\r\n        }\r\n        return buffer.toString();\r\n    }\r\n\r\n    /**\r\n     * @param node\r\n     * @return String\r\n     */\r\n    protected String getTagInstanceName(Node node) {\r\n        if(node != null) {\r\n            String tagClassName = ((TagNode)node).getTagClassName();\r\n            int k = tagClassName.lastIndexOf(\".\");\r\n    \r\n            if(k > -1) {\r\n                return this.getVariableName(node, \"_jsp_\" + tagClassName.substring(k + 1) + \"_\");\r\n            }\r\n            return this.getVariableName(node, \"_jsp_\" + tagClassName + \"_\");\r\n        }\r\n        else {\r\n            return \"_jsp_undefined\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param node\r\n     * @param prefix\r\n     * @return String\r\n     */\r\n    protected String getVariableName(Node node, String prefix) {\r\n        if(node != null) {\r\n            return prefix + (node.getOffset() + 1);\r\n        }\r\n        else {\r\n            return prefix + \"_undefined\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param expression\r\n     * @return String\r\n     */\r\n    protected String getStringExpression(String expression, boolean escapeXml) {\r\n        if(expression != null) {\r\n            if(expression.indexOf(\"");
        out.write(_jsp_string_13, 0, _jsp_string_13.length);
        // EXPRESSION: lineNumber: 1558
        expressionContext.print(out, expressionContext.getString("\") > -1) {\r\n                if(escapeXml) {\r\n                    return \"ExpressionUtil.getHtml(expressionContext, \\\"\" + StringUtil.escape(expression) + \"\\\")\";"));
        // TEXT: lineNumber: 1558
        // out.write("\r\n                return \"ExpressionUtil.getString(expressionContext, \\\"\" + StringUtil.escape(expression) + \"\\\")\";\r\n            }\r\n            Object constant = ExpressionUtil.getValue(expression);\r\n\r\n            if(constant instanceof String) {\r\n                if(escapeXml) {\r\n                    return \"\\\"\" + StringUtil.escape(HtmlUtil.encode(expression)) + \"\\\"\";\r\n                }\r\n                return \"\\\"\" + StringUtil.escape(expression) + \"\\\"\";\r\n            }\r\n            else if(constant instanceof Float) {\r\n                return constant.toString() + \"f\";\r\n            }\r\n            else if(constant instanceof Double) {\r\n                return constant.toString() + \"d\";\r\n            }\r\n            else if(constant instanceof Long) {\r\n                return constant.toString() + \"L\";\r\n            }\r\n            return constant.toString();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param expression\r\n     * @return String\r\n     */\r\n    protected String getValueExpression(String expression) {\r\n        if(expression != null) {\r\n            List<Node> nodes = ExpressionUtil.parse(expression);\r\n\r\n            if(nodes.size() == 1) {\r\n                Node node = nodes.get(0);\r\n\r\n                if(node instanceof Expression) {\r\n                    if(this.isJavaIdentifier(node.getTextContent())) {\r\n                        return \"pageContext.getAttribute(\\\"\" + node.getTextContent() + \"\\\")\";\r\n                    }\r\n                    return \"ExpressionUtil.evaluate(expressionContext, \\\"\" + StringUtil.escape(expression) + \"\\\", null)\";\r\n                }\r\n                Object constant = ExpressionUtil.getValue(node.getTextContent());\r\n\r\n                if(constant instanceof String) {\r\n                    return \"\\\"\" + StringUtil.escape(expression) + \"\\\"\";\r\n                }\r\n                else if(constant instanceof Float) {\r\n                    return constant.toString() + \"f\";\r\n                }\r\n                else if(constant instanceof Double) {\r\n                    return constant.toString() + \"d\";\r\n                }\r\n                else if(constant instanceof Long) {\r\n                    return constant.toString() + \"L\";\r\n                }\r\n                else {\r\n                    return constant.toString();\r\n                }\r\n            }\r\n            return \"ExpressionUtil.evaluate(expressionContext, \\\"\" + StringUtil.escape(expression) + \"\\\", null)\";\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param resource\r\n     * @return String\r\n     */\r\n    public static String getJavaTemplate(String resource) {\r\n        InputStreamReader inputStreamReader = null;\r\n        InputStream inputStream = JspCompiler.class.getResourceAsStream(resource);\r\n\r\n        try {\r\n            StringBuilder buffer = new StringBuilder(2048);\r\n            inputStreamReader = new InputStreamReader(inputStream, \"UTF-8\");\r\n\r\n            int length = 0;\r\n            char[] cbuf = new char[2048];\r\n\r\n            while((length = inputStreamReader.read(cbuf)) > 0) {\r\n                buffer.append(cbuf, 0, length);\r\n            }\r\n            return buffer.toString();\r\n        }\r\n        catch(IOException e) {\r\n            logger.warn(e.getMessage(), e);\r\n        }\r\n        finally {\r\n            if(inputStream != null) {\r\n                try {\r\n                    inputStream.close();\r\n                }\r\n                catch(IOException e) {\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param source\r\n     * @param context\r\n     * @return String\r\n     */\r\n    public String replace(String source, Map<String, String> context) {\r\n        char c;\r\n        StringBuilder name = new StringBuilder();\r\n        CharBuffer result = new CharBuffer(4096);\r\n\r\n        for(int i = 0; i < source.length(); i++) {\r\n            c = source.charAt(i);\r\n\r\n            if(c == \'$\' && i < source.length() - 1 && source.charAt(i + 1) == \'{\') {\r\n                for(int j = i + 2; j < source.length(); j++) {\r\n                    i = j;\r\n                    c = source.charAt(j);\r\n\r\n                    if(c == \'}\') {\r\n                        String value = context.get(name.toString());\r\n\r\n                        if(value != null) {\r\n                            result.append(value);\r\n                        }\r\n                        break;\r\n                    }\r\n                    else {\r\n                        name.append(c);\r\n                    }\r\n                }\r\n                name.setLength(0);\r\n            }\r\n            else {\r\n                result.append(c);\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n    /**\r\n     * @param fastJstl the fastJstl to set\r\n     */\r\n    public void setFastJstl(boolean fastJstl) {\r\n        this.fastJstl = fastJstl;\r\n    }\r\n\r\n    /**\r\n     * @return the fastJstl\r\n     */\r\n    public boolean getFastJstl() {\r\n        return this.fastJstl;\r\n    }\r\n}\r\n");
        out.write(_jsp_string_15, 0, _jsp_string_15.length);

        out.flush();
        jspWriter.flush();
    }

    public static final char[] _jsp_string_1 = "/*\r\n * $RCSfile: JspCompiler.java,v $$\r\n * $Revision: 1.1 $\r\n * $Date: 2013-11-08 $\r\n *\r\n * Copyright (C) 2008 Skin, Inc. All rights reserved.\r\n *\r\n * This software is the proprietary information of Skin, Inc.\r\n * Use is subject to license terms.\r\n */\r\npackage com.skin.ayada.compile;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.lang.reflect.Method;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport com.skin.ayada.Version;\r\nimport com.skin.ayada.io.CharBuffer;\r\nimport com.skin.ayada.io.ChunkWriter;\r\nimport com.skin.ayada.statement.Expression;\r\nimport com.skin.ayada.statement.Node;\r\nimport com.skin.ayada.statement.NodeType;\r\nimport com.skin.ayada.statement.TagNode;\r\nimport com.skin.ayada.statement.Variable;\r\nimport com.skin.ayada.tagext.BodyTag;\r\nimport com.skin.ayada.tagext.DynamicAttributes;\r\nimport com.skin.ayada.tagext.IterationTag;\r\nimport com.skin.ayada.tagext.SimpleTag;\r\nimport com.skin.ayada.tagext.Tag;\r\nimport com.skin.ayada.tagext.TryCatchFinally;\r\nimport com.skin.ayada.template.Template;\r\nimport com.skin.ayada.util.ClassUtil;\r\nimport com.skin.ayada.util.DateUtil;\r\nimport com.skin.ayada.util.ExpressionUtil;\r\nimport com.skin.ayada.util.HtmlUtil;\r\nimport com.skin.ayada.util.NodeUtil;\r\nimport com.skin.ayada.util.StringUtil;\r\nimport com.skin.ayada.util.TagUtil;\r\n\r\n/**\r\n * <p>Title: JspCompiler</p>\r\n * <p>Description: </p>\r\n * <p>Copyright: Copyright (c) 2006</p>\r\n * @author xuesong.net\r\n * @version 1.0\r\n */\r\npublic class JspCompiler {\r\n    private boolean fastJstl = true;\r\n    private static final String JAVA_TEMPLATE = JspCompiler.getJavaTemplate(\"class.jsp\");\r\n    private static final Logger logger = LoggerFactory.getLogger(JspCompiler.class);\r\n\r\n    public String compile(Template template, String className, String packageName) {\r\n        Date date = new Date();\r\n        String jspDirective = this.getJspDirective(template);\r\n        String jspDeclaration = this.getJspDeclaration(template);\r\n        String methodBody = this.getMethodBody(template);\r\n        String subClassBody = this.getSubClassBody(template);\r\n        String staticDeclaration = this.getStaticDeclaration(template);\r\n\r\n        Map<String, String> context = new HashMap<String, String>();\r\n        context.put(\"java.className\", className);\r\n        context.put(\"java.packageName\", packageName);\r\n        context.put(\"build.date\", DateUtil.format(date, \"yyyy-MM-dd\"));\r\n        context.put(\"build.time\", DateUtil.format(date, \"yyyy-MM-dd HH:mm:ss SSS\"));\r\n        context.put(\"template.home\", StringUtil.replace(template.getHome(), \"\\\\\", \"/\"));\r\n        context.put(\"template.path\", StringUtil.replace(template.getPath(), \"\\\\\", \"/\"));\r\n        context.put(\"template.lastModified\", DateUtil.format(template.getLastModified(), \"yyyy-MM-dd HH:mm:ss SSS\"));\r\n        context.put(\"options.fastJstl\", String.valueOf(this.fastJstl));\r\n        context.put(\"compiler.version\", Version.getVersion());\r\n        context.put(\"jsp.directive.import\", jspDirective);\r\n        context.put(\"jsp.declaration\", jspDeclaration);\r\n        context.put(\"jsp.method.body\", methodBody);\r\n        context.put(\"jsp.subclass.body\", subClassBody);\r\n        context.put(\"jsp.static.declaration\", staticDeclaration);\r\n        return this.replace(JAVA_TEMPLATE, context);\r\n    }\r\n\r\n    /**\r\n     * @param template\r\n     * @return String\r\n     */\r\n    public String getJspDirective(Template template) {\r\n        Node node = null;\r\n        List<Node> list = template.getNodes();\r\n        ChunkWriter chunkWriter = new ChunkWriter(4096);\r\n        PrintWriter writer = new PrintWriter(chunkWriter);\r\n\r\n        for(int index = 0, size = list.size(); index < size; index++) {\r\n            node = list.get(index);\r\n\r\n            if(node.getNodeType() == NodeType.JSP_DIRECTIVE_PAGE) {\r\n                if(node.getOffset() == index && node.getAttribute(\"import\") != null) {\r\n                    writer.println(\"import \" + node.getAttribute(\"import\") + \"; // jsp:directive.import: lineNumber: \" + node.getLineNumber());\r\n                }\r\n            }\r\n        }\r\n        writer.flush();\r\n        writer.close();\r\n        return chunkWriter.toString();\r\n    }\r\n\r\n    /**\r\n     * @param template\r\n     * @return String\r\n     */\r\n    public String getJspDeclaration(Template template) {\r\n        Node node = null;\r\n        List<Node> list = template.getNodes();\r\n        ChunkWriter chunkWriter = new ChunkWriter(4096);\r\n        PrintWriter writer = new PrintWriter(chunkWriter);\r\n\r\n        for(int index = 0, size = list.size(); index < size; index++) {\r\n            node = list.get(index);\r\n\r\n            if(node.getNodeType() == NodeType.JSP_DECLARATION) {\r\n                if(node.getOffset() == index) {\r\n                    writer.println(\"    // JSP_DECLARATION: lineNumber: \" + node.getLineNumber());\r\n                    writer.print(node.getTextContent());\r\n                }\r\n                else {\r\n                    writer.println(\"    // jsp:declaration END\");\r\n                    writer.println();\r\n                }\r\n            }\r\n        }\r\n        writer.flush();\r\n        writer.close();\r\n        return chunkWriter.toString();\r\n    }\r\n\r\n    /**\r\n     * @param template\r\n     * @return String\r\n     */\r\n    public String getStaticDeclaration(Template template) {\r\n        Node node = null;\r\n        List<Node> list = template.getNodes();\r\n        ChunkWriter chunkWriter = new ChunkWriter(4096);\r\n        PrintWriter writer = new PrintWriter(chunkWriter);\r\n\r\n        for(int index = 0, size = list.size(); index < size; index++) {\r\n            node = list.get(index);\r\n\r\n            if(node.getNodeType() == NodeType.TEXT) {\r\n                writer.print(\"    public static final char[] \" + this.getVariableName(node, \"_jsp_string_\"));\r\n                writer.print(\" = \\\"\");\r\n                writer.print(StringUtil.escape(node.getTextContent()));\r\n                writer.println(\"\\\".toCharArray();\");\r\n            }\r\n        }\r\n        writer.flush();\r\n        writer.close();\r\n        return chunkWriter.toString();\r\n    }\r\n\r\n    /**\r\n     * @param template\r\n     * @return String\r\n     */\r\n    public String getMethodBody(Template template) {\r\n        ChunkWriter chunkWriter = new ChunkWriter(8192);\r\n        PrintWriter writer = new PrintWriter(chunkWriter);\r\n        List<Node> list = template.getNodes();\r\n        this.writeBody(writer, list, 0, list.size());\r\n        return chunkWriter.toString();\r\n    }\r\n\r\n    /**\r\n     * @param template\r\n     * @return String\r\n     */\r\n    public String getSubClassBody(Template template) {\r\n        ChunkWriter chunkWriter = new ChunkWriter(8192);\r\n        PrintWriter writer = new PrintWriter(chunkWriter);\r\n        List<Node> list = template.getNodes();\r\n        this.writeClass(writer, list, 0, list.size());\r\n        return chunkWriter.toString();\r\n    }\r\n\r\n    /**\r\n     * @param list\r\n     * @param writer\r\n     * @param offset\r\n     * @param length\r\n     */\r\n    public void writeClass(PrintWriter writer, List<Node> list, int offset, int length) {\r\n        int nodeType = 0;\r\n        Node node = null;\r\n        String tagClassName = null;\r\n\r\n        for(int index = offset, end = offset + length; index < end; index++) {\r\n            node = list.get(index);\r\n            nodeType = node.getNodeType();\r\n\r\n            if(nodeType != NodeType.TAG_NODE) {\r\n                continue;\r\n            }\r\n\r\n            tagClassName = ((TagNode)node).getTagClassName();\r\n\r\n            if(index == node.getOffset() && this.isAssignableFrom(tagClassName, SimpleTag.class)) {\r\n                String tagInstanceName = this.getTagInstanceName(node);\r\n                String jspFragmentClassName = this.getVariableName(node, \"JspFragment_\");\r\n                writer.println();\r\n                writer.println(\"    // NODE START: lineNumber: \" + node.getLineNumber() + \", offset: \" + node.getOffset() + \", length: \" + node.getLength() + \", tagClassName: \" + tagClassName + \", tagInstanceName: \" + tagInstanceName);\r\n                writer.println(\"    // \" + NodeUtil.getDescription(node));\r\n                writer.println(\"    public class \" + jspFragmentClassName + \" extends com.skin.ayada.tagext.AbstractJspFragment {\");\r\n                writer.println(\"        @Override\");\r\n                writer.println(\"        public void execute(final JspWriter writer) throws Exception {\");\r\n                writer.println(\"            JspWriter out = writer;\");\r\n                writer.println(\"            PageContext pageContext = this.getPageContext();\");\r\n                writer.println(\"            ExpressionContext expressionContext = pageContext.getExpressionContext();\");\r\n                writer.println(\"            Tag \" + tagInstanceName + \" = this.getParent();\");\r\n                writer.println();\r\n                writer.println(\"            // offset: \" + (index + 1) + \", length: \" + (node.getLength() - 2));\r\n                this.writeBody(writer, list, index + 1, node.getLength() - 2);\r\n                writer.println(\"        }\");\r\n                writer.println(\"    }\");\r\n                writer.println(\"    // NODE END: lineNumber: \" + node.getLineNumber() + \", tagClassName: \" + tagClassName + \", tagInstanceName: \" + tagInstanceName);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param list\r\n     * @param offset\r\n     * @param length\r\n     */\r\n    public void writeBody(PrintWriter writer, List<Node> list, int offset, int length) {\r\n        int nodeType = 0;\r\n        Node node = null;\r\n        String indent = null;\r\n        String variable = null;\r\n\r\n        for(int index = offset, end = offset + length; index < end; index++) {\r\n            node = list.get(index);\r\n            indent = this.getIndent(node);\r\n            nodeType = node.getNodeType();\r\n\r\n            if(nodeType == NodeType.TEXT) {\r\n                variable = this.getVariableName(node, \"_jsp_string_\");\r\n                writer.println(indent + \"// TEXT: lineNumber: \" + node.getLineNumber());\r\n                writer.println(indent + \"// out.write(\\\"\" + StringUtil.escape(node.getTextContent()) + \"\\\");\");\r\n                writer.println(indent + \"out.write(\" + variable + \", 0, \" + variable + \".length);\");\r\n\r\n                if(this.isTagNode(list, index + 1)) {\r\n                    writer.println();\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if(nodeType == NodeType.VARIABLE) {\r\n                String textContent = node.getTextContent();\r\n                writer.println(indent + \"// VARIABLE: lineNumber: \" + node.getLineNumber());\r\n\r\n                if(\"#\".equals(((Variable)node).getFlag())) {\r\n                    writer.println(indent + \"out.write(pageContext.getAttribute(\\\"\" + textContent + \"\\\"));\");\r\n                }\r\n                else {\r\n                    writer.println(indent + \"expressionContext.print(out, pageContext.getAttribute(\\\"\" + textContent + \"\\\"));\");\r\n                }\r\n\r\n                if(this.isTagNode(list, index + 1)) {\r\n                    writer.println();\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if(nodeType == NodeType.EXPRESSION) {\r\n                String textContent = node.getTextContent();\r\n                writer.println(indent + \"// EXPRESSION: lineNumber: \" + node.getLineNumber());\r\n\r\n                if(\"#\".equals(((Expression)node).getFlag())) {\r\n                    writer.println(indent + \"out.write(expressionContext.getString(\\\"\" + StringUtil.escape(textContent) + \"\\\"));\");\r\n                }\r\n                else {\r\n                    writer.println(indent + \"expressionContext.print(out, expressionContext.getString(\\\"\" + StringUtil.escape(textContent) + \"\\\"));\");\r\n                }\r\n\r\n                if(this.isTagNode(list, index + 1)) {\r\n                    writer.println();\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if(node.getLength() == 0) {\r\n                throw new RuntimeException(\"Exception at line #\" + node.getLineNumber() + \" \" + NodeUtil.getDescription(node) + \" not match !\");\r\n            }\r\n\r\n            int flag = this.write(writer, node, index, indent);\r\n\r\n            if(flag == Tag.SKIP_BODY) {\r\n                index = node.getOffset() + node.getLength() - 2;\r\n            }\r\n            else {\r\n                if(node.getOffset() != index) {\r\n                    writer.println();\r\n                }\r\n            }\r\n        }\r\n        writer.flush();\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    public int write(PrintWriter writer, Node node, int index, String indent) {\r\n        /** Jsp Support */\r\n        int nodeType = node.getNodeType();\r\n\r\n        if(node.getOffset() == index) {\r\n            switch (nodeType) {\r\n                case NodeType.JSP_DECLARATION: {\r\n                    writer.println(indent + \"// jsp:declaration: lineNumber: \" + node.getLineNumber());\r\n                    writer.println(indent + \"// \" + NodeUtil.getDescription(node));\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_DIRECTIVE_PAGE: {\r\n                    writer.println(indent + \"// jsp:directive.page: lineNumber: \" + node.getLineNumber());\r\n                    writer.println(indent + \"// \" + NodeUtil.getDescription(node));\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_DIRECTIVE_TAGLIB: {\r\n                    writer.println(indent + \"// jsp:directive.taglib: lineNumber: \" + node.getLineNumber());\r\n                    writer.println(indent + \"// \" + NodeUtil.getDescription(node));\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_DIRECTIVE_INCLUDE: {\r\n                    writer.println(indent + \"// jsp:directive.include: lineNumber: \" + node.getLineNumber());\r\n                    writer.println(indent + \"// \" + NodeUtil.getDescription(node));\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_SCRIPTLET: {\r\n                    writer.println(indent + \"// jsp:scriptlet: lineNumber: \" + node.getLineNumber());\r\n                    writer.println(node.getTextContent());\r\n                    return Tag.SKIP_BODY;\r\n                }\r\n                case NodeType.JSP_EXPRESSION: {\r\n                    writer.println(indent + \"// jsp:expression: lineNumber: \" + node.getLineNumber());\r\n                    // writer.println(indent + \"out.print(\" + node.getTextContent() + \");\");\r\n                    writer.println(indent + \"expressionContext.print(out, (\" + node.getTextContent() + \"));\");\r\n                    return Tag.SKIP_BODY;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            switch (nodeType) {\r\n                case NodeType.JSP_DECLARATION: {\r\n                    // writer.println(indent + \"// jsp:declaration END\");\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_DIRECTIVE_PAGE: {\r\n                    // writer.println(indent + \"// jsp:directive.page END\");\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_DIRECTIVE_TAGLIB: {\r\n                    // writer.println(indent + \"// jsp:directive.taglib END\");\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_DIRECTIVE_INCLUDE: {\r\n                    // writer.println(indent + \"// jsp:directive.include END\");\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_SCRIPTLET: {\r\n                    writer.println(indent + \"// jsp:scriptlet END\");\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n                case NodeType.JSP_EXPRESSION: {\r\n                    writer.println(indent + \"// jsp:expression END\");\r\n                    return Tag.EVAL_PAGE;\r\n                }\r\n            }\r\n        }\r\n\r\n        /** Tag Support */\r\n        String tagClassName = ((TagNode)node).getTagClassName();\r\n        String tagInstanceName = this.getTagInstanceName(node);\r\n\r\n        if(node.getOffset() == index) {\r\n            writer.println(indent + \"// NODE START: lineNumber: \" + node.getLineNumber() + \", offset: \" + node.getOffset() + \", length: \" + node.getLength() + \", tagClassName: \" + tagClassName + \", tagInstanceName: \" + tagInstanceName);\r\n            writer.println(indent + \"// \" + StringUtil.escape(NodeUtil.getDescription(node)));\r\n        }\r\n\r\n        int flag = Tag.EVAL_PAGE;\r\n\r\n        if(this.fastJstl && tagClassName.startsWith(\"com.skin.ayada.jstl.\")) {\r\n            if(tagClassName.endsWith(\".IfTag\")) {\r\n                flag = this.writeIfTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".SetTag\")) {\r\n                flag = this.writeSetTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".OutTag\")) {\r\n                flag = this.writeOutTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ForEachTag\")) {\r\n                flag = this.writeForEachTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ChooseTag\")) {\r\n                flag = this.writeChooseTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".WhenTag\")) {\r\n                flag = this.writeWhenTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".OtherwiseTag\")) {\r\n                flag = this.writeOtherwiseTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".CommentTag\")) {\r\n                flag = this.writeCommentTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".PrintTag\")) {\r\n                flag = this.writePrintTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".AttributeTag\")) {\r\n                flag = this.writeAttributeTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ElementTag\")) {\r\n                flag = this.writeElementTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ConstructorTag\")) {\r\n                flag = this.writeConstructorTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".PropertyTag\")) {\r\n                flag = this.writePropertyTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ParameterTag\")) {\r\n                flag = this.writePrameterTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ExecuteTag\")) {\r\n                flag = this.writeExecuteTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".ExitTag\")) {\r\n                flag = this.writeExitTag(writer, node, index, indent);\r\n            }\r\n            else if(tagClassName.endsWith(\".fmt.DateFormatTag\")) {\r\n                flag = this.writeFormatDateTag(writer, node, index, indent);\r\n            }\r\n            else {\r\n                flag = this.writeTag(writer, node, index, indent);\r\n            }\r\n        }\r\n        else {\r\n            flag = this.writeTag(writer, node, index, indent);\r\n        }\r\n\r\n        if(node.getOffset() != index) {\r\n            writer.println(indent + \"// NODE END: lineNumber: \" + node.getLineNumber() + \", tagClassName: \" + tagClassName + \", tagInstanceName: \" + tagInstanceName);\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeIfTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            writer.println(indent + \"if(ExpressionUtil.getBoolean(expressionContext, \\\"\" + StringUtil.escape(node.getAttribute(\"test\")) + \"\\\")) {\");\r\n        }\r\n        else {\r\n            writer.println(indent + \"} // jsp.jstl.core.IfTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeSetTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String name = node.getAttribute(\"var\");\r\n        String value = this.getValueExpression(node.getAttribute(\"value\"));\r\n        String target = this.getValueExpression(node.getAttribute(\"target\"));\r\n        String property = node.getAttribute(\"property\");\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                if(name != null) {\r\n                    writer.println(indent + \"pageContext.setAttribute(\\\"\" + name + \"\\\", \" + value + \");\");\r\n                }\r\n                else {\r\n                    if(target != null && property != null) {\r\n                        writer.println(indent + \"com.skin.ayada.util.ClassUtil.setProperty(\" + target + \", \\\"\" + property + \"\\\", \" + value + \");\");\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if(node.getLength() > 2) {\r\n                    writer.println(indent + \"out = pageContext.pushBody();\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if(value == null) {\r\n                if(node.getLength() > 2) {\r\n                    if(name != null) {\r\n                        writer.println(indent + \"pageContext.setAttribute(\\\"\" + name + \"\\\", ((BodyContent)out).getString().trim());\");\r\n                    }\r\n                    else {\r\n                        if(target != null && property != null) {\r\n                            writer.println(indent + \"com.skin.ayada.util.ClassUtil.setProperty(\" + target + \", \\\"\" + property + \"\\\", ((BodyContent)out).getString().trim());\");\r\n                        }\r\n                    }\r\n                    writer.println(indent + \"out = pageContext.popBody();\");\r\n                }\r\n                else {\r\n                    if(name != null) {\r\n                        writer.println(indent + \"pageContext.setAttribute(\\\"\" + name + \"\\\", \\\"\\\");\");\r\n                    }\r\n                    else {\r\n                        if(target != null && property != null) {\r\n                            writer.println(indent + \"com.skin.ayada.util.ClassUtil.setProperty(\" + target + \", \\\"\" + property + \"\\\", \\\"\\\");\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            writer.println(indent + \"// jsp.jstl.core.SetTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeOutTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String value = node.getAttribute(\"value\");\r\n        boolean escapeXml = \"true\".equals(node.getAttribute(\"escapeXml\"));\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                writer.println(indent + \"com.skin.ayada.jstl.core.OutTag.write(out, \" + this.getValueExpression(value) + \", \" + escapeXml + \");\");\r\n                 writer.println(indent + \"// out.print(\" + this.getStringExpression(value, escapeXml) + \");\");\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            else if(node.getLength() > 2) {\r\n                writer.println(indent + \"out = pageContext.pushBody();\");\r\n            }\r\n            return Tag.EVAL_PAGE;\r\n        }\r\n\r\n        if(value == null && node.getLength() > 2) {\r\n            writer.println(indent + \"pageContext.print((BodyContent)out, \" + escapeXml + \");\");\r\n            writer.println(indent + \"out = pageContext.popBody();\");\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.OutTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeForEachTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String tagClassName = ((TagNode)node).getTagClassName();\r\n        String tagInstanceName = this.getTagInstanceName(node);\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n        String forEachOldVar = this.getVariableName(node, \"_jsp_old_var_\");\r\n        String forEachOldVarStatus = this.getVariableName(node, \"_jsp_old_var_status_\");\r\n\r\n        if(node.getOffset() == index) {\r\n            String items = node.getAttribute(\"items\");\r\n            String variable = node.getAttribute(\"var\");\r\n            String begin = node.getAttribute(\"begin\");\r\n            String step = node.getAttribute(\"step\");\r\n            String end = node.getAttribute(\"end\");\r\n            String varStatus = node.getAttribute(\"varStatus\");\r\n            boolean hasParent = this.hasParent(node);\r\n\r\n            if(variable != null && variable.trim().length() > 0) {\r\n                writer.println(indent + \"Object \" + forEachOldVar + \" = pageContext.getAttribute(\\\"\" + variable.trim() + \"\\\");\");\r\n            }\r\n\r\n            if(varStatus != null && varStatus.trim().length() > 0) {\r\n                writer.println(indent + \"Object \" + forEachOldVarStatus + \" = pageContext.getAttribute(\\\"\" + varStatus.trim() + \"\\\");\");\r\n            }\r\n\r\n            writer.println(indent + tagClassName + \" \" + tagInstanceName + \" = new \" + tagClassName + \"();\");\r\n\r\n            if(hasParent) {\r\n                writer.println(indent + tagInstanceName + \".setParent(\" + parentTagInstanceName + \");\");\r\n            }\r\n            else {\r\n                writer.println(indent + tagInstanceName + \".setParent((Tag)null);\");\r\n            }\r\n\r\n            writer.println(indent + tagInstanceName + \".setPageContext(pageContext);\");\r\n\r\n            if(variable != null) {\r\n                writer.println(indent + tagInstanceName + \".setVar(\\\"\" + StringUtil.escape(variable) + \"\\\");\");\r\n            }\r\n\r\n            if(items != null) {\r\n                if(items.indexOf(\"".toCharArray();
    public static final char[] _jsp_string_3 = "\r\n                    else {\r\n                        writer.println(indent + tagInstanceName + \".setItems(ExpressionUtil.evaluate(expressionContext, \\\"\" + StringUtil.escape(items) + \"\\\", null));\");\r\n                    }\r\n                }\r\n                else {\r\n                    writer.println(indent + tagInstanceName + \".setItems(\\\"\" + StringUtil.escape(items) + \"\\\");\");\r\n                }\r\n            }\r\n\r\n            if(begin != null && end != null) {\r\n                if(begin.indexOf(\"".toCharArray();
    public static final char[] _jsp_string_5 = "\r\n                }\r\n                else {\r\n                    writer.println(indent + tagInstanceName + \".setBegin(ExpressionUtil.getInteger(expressionContext, \\\"\" + begin + \"\\\"));\");\r\n                }\r\n\r\n                if(end.indexOf(\"".toCharArray();
    public static final char[] _jsp_string_7 = "\r\n                }\r\n                else {\r\n                    writer.println(indent + tagInstanceName + \".setEnd(ExpressionUtil.getInteger(expressionContext, \\\"\" + end + \"\\\"));\");\r\n                }\r\n            }\r\n\r\n            if(step != null) {\r\n                if(step.indexOf(\"".toCharArray();
    public static final char[] _jsp_string_9 = "\r\n                }\r\n                else {\r\n                    writer.println(indent + tagInstanceName + \".setStep(ExpressionUtil.getInteger(expressionContext, \\\"\" + step + \"\\\"));\");\r\n                }\r\n            }\r\n\r\n            if(varStatus != null) {\r\n                writer.println(indent + tagInstanceName + \".setVarStatus(\\\"\" + varStatus + \"\\\");\");\r\n            }\r\n            writer.println(indent + \"if(\" + tagInstanceName + \".doStartTag() != Tag.SKIP_BODY) {\");\r\n            writer.println(indent + \"    while(true) {\");\r\n        }\r\n        else {\r\n            String variable = node.getAttribute(\"var\");\r\n            String varStatus = node.getAttribute(\"varStatus\");\r\n            writer.println(indent + \"        if(\" + tagInstanceName + \".doAfterBody() != IterationTag.EVAL_BODY_AGAIN) {\");\r\n            writer.println(indent + \"            break;\");\r\n            writer.println(indent + \"        }\");\r\n            writer.println(indent + \"    }\");\r\n            writer.println(indent + \"}\");\r\n            writer.println(indent + tagInstanceName + \".release();\");\r\n\r\n            if(variable != null && variable.trim().length() > 0) {\r\n                writer.println(indent + \"pageContext.setAttribute(\\\"\" + variable.trim() + \"\\\", \" + forEachOldVar + \");\");\r\n            }\r\n\r\n            if(varStatus != null && varStatus.trim().length() > 0) {\r\n                writer.println(indent + \"pageContext.setAttribute(\\\"\" + varStatus.trim() + \"\\\", \" + forEachOldVarStatus + \");\");\r\n            }\r\n            writer.println(indent + \"// jsp.jstl.core.ForEachTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeChooseTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String tagInstanceName = this.getTagInstanceName(node);\r\n            writer.println(indent + \"boolean \" + tagInstanceName + \" = true;\");\r\n            writer.println();\r\n        }\r\n        else {\r\n            writer.println(indent + \"// jsp.jstl.core.ChooseTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeWhenTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n            writer.println(indent + \"if(\" + parentTagInstanceName + \" && ExpressionUtil.getBoolean(expressionContext, \\\"\" + StringUtil.escape(node.getAttribute(\"test\")) + \"\\\")) {\");\r\n            writer.println(indent + \"    \" + parentTagInstanceName + \" = false;\");\r\n        }\r\n        else {\r\n            writer.println(indent + \"} // jsp.jstl.core.WhenTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeOtherwiseTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n            writer.println(indent + \"if(\" + parentTagInstanceName + \") {\");\r\n            writer.println(indent + \"    \" + parentTagInstanceName + \" = false;\");\r\n        }\r\n        else {\r\n            writer.println(indent + \"} // jsp.jstl.core.OtherwiseTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeFormatDateTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String tagClassName = ((TagNode)node).getTagClassName();\r\n            String tagInstanceName = this.getTagInstanceName(node);\r\n            String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n            boolean hasParent = this.hasParent(node);\r\n\r\n            writer.println(indent + tagClassName + \" \" + tagInstanceName + \" = new \" + tagClassName + \"();\");\r\n\r\n            if(hasParent) {\r\n                writer.println(indent + tagInstanceName + \".setParent(\" + parentTagInstanceName + \");\");\r\n            }\r\n            else {\r\n                writer.println(indent + tagInstanceName + \".setParent((Tag)null);\");\r\n            }\r\n            writer.println(indent + tagInstanceName + \".setPageContext(pageContext);\");\r\n            this.setAttributes(indent, tagClassName, tagInstanceName, node.getAttributes(), writer);\r\n            writer.println(indent + tagInstanceName + \".doStartTag();\");\r\n            writer.println(indent + tagInstanceName + \".doEndTag();\");\r\n            writer.println(indent + tagInstanceName + \".release();\");\r\n        }\r\n        else {\r\n            writer.println(indent + \"// jsp.jstl.fmt.FormatDateTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeCommentTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            writer.println(indent + \"if(com.skin.ayada.jstl.core.ContinueTag.getTrue()) {\");\r\n        }\r\n        else {\r\n            writer.println(indent + \"} // jsp.jstl.core.CommentTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writePrintTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String out = node.getAttribute(\"out\");\r\n            String value = node.getAttribute(\"value\");\r\n\r\n            if(out == null || out.trim().length() < 1) {\r\n                out = \"null\";\r\n            }\r\n            else {\r\n                out = \"ExpressionUtil.evaluate(expressionContext, \\\"\" + StringUtil.escape(out) + \"\\\", null)\";\r\n            }\r\n            writer.println(indent + \"com.skin.ayada.jstl.core.PrintTag.print(pageContext, \" + out + \", \" + this.getValueExpression(value) + \");\");\r\n        }\r\n        else {\r\n            writer.println(indent + \"// jsp.jstl.core.PrintTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeAttributeTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String name = node.getAttribute(\"name\");\r\n        String value = node.getAttribute(\"value\");\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                if(name != null) {\r\n                    writer.println(indent + parentTagInstanceName + \".setAttribute(\\\"\" + name + \"\\\", \" + this.getValueExpression(value) + \");\");\r\n                }\r\n                else {\r\n                    writer.println(indent + parentTagInstanceName + \".setAttribute((String)null, \" + this.getValueExpression(value) + \");\");\r\n                }\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            else if(node.getLength() > 2) {\r\n                writer.println(indent + \"out = pageContext.pushBody();\");\r\n            }\r\n            return Tag.EVAL_PAGE;\r\n        }\r\n\r\n        if(value == null && node.getLength() > 2) {\r\n            if(name != null) {\r\n                writer.println(indent + parentTagInstanceName + \".setAttribute(\\\"\" + name + \"\\\", ((BodyContent)out).getString());\");\r\n            }\r\n            else {\r\n                writer.println(indent + parentTagInstanceName + \".setAttribute((String)null, ((BodyContent)out).getString());\");\r\n            }\r\n            writer.println(indent + \"out = pageContext.popBody();\");\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.AttributeTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeElementTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String indek = node.getAttribute(\"index\");\r\n        String value = node.getAttribute(\"value\");\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                if(indek != null) {\r\n                    writer.println(indent + parentTagInstanceName + \".setElement(\" + indek + \", \" + this.getValueExpression(value) + \");\");\r\n                }\r\n                else {\r\n                    writer.println(indent + parentTagInstanceName + \".addElement(\" + this.getValueExpression(value) + \");\");\r\n                }\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            else if(node.getLength() > 2) {\r\n                writer.println(indent + \"out = pageContext.pushBody();\");\r\n            }\r\n            return Tag.EVAL_PAGE;\r\n        }\r\n        if(value == null && node.getLength() > 2) {\r\n            if(indek != null) {\r\n                writer.println(indent + parentTagInstanceName + \".setElement(\" + indek + \", ((BodyContent)out).getString());\");\r\n            }\r\n            else {\r\n                writer.println(indent + parentTagInstanceName + \".addElement(((BodyContent)out).getString());\");\r\n            }\r\n            writer.println(indent + \"out = pageContext.popBody();\");\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.ElementTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeConstructorTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String name = node.getAttribute(\"type\");\r\n        String value = node.getAttribute(\"value\");\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                writer.println(indent + \"com.skin.ayada.jstl.core.ConstructorTag.setArgument(\" + parentTagInstanceName + \", \\\"\" + name + \"\\\", \" + this.getValueExpression(value) + \");\");\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            return Tag.EVAL_PAGE;\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.ConstructorTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writePropertyTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String name = node.getAttribute(\"name\");\r\n        String value = node.getAttribute(\"value\");\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                writer.println(indent + parentTagInstanceName + \".setProperty(\\\"\" + name + \"\\\", \" + this.getValueExpression(value) + \");\");\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            else if(node.getLength() > 2) {\r\n                writer.println(indent + \"out = pageContext.pushBody();\");\r\n            }\r\n            return Tag.EVAL_PAGE;\r\n        }\r\n        if(value == null && node.getLength() > 2) {\r\n            writer.println(indent + parentTagInstanceName + \".setProperty(\\\"\" + name + \"\\\", ((BodyContent)out).getString());\");\r\n            writer.println(indent + \"out = pageContext.popBody();\");\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.PropertyTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writePrameterTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String name = node.getAttribute(\"name\");\r\n        String value = node.getAttribute(\"value\");\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n\r\n        if(node.getOffset() == index) {\r\n            if(value != null) {\r\n                writer.println(indent + parentTagInstanceName + \".setParameter(\\\"\" + name + \"\\\", \" + this.getStringExpression(value, false) + \");\");\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            else if(node.getLength() > 2) {\r\n                writer.println(indent + \"out = pageContext.pushBody();\");\r\n            }\r\n            return Tag.EVAL_PAGE;\r\n        }\r\n        if(value == null && node.getLength() > 2) {\r\n            writer.println(indent + parentTagInstanceName + \".setParameter(\\\"\" + name + \"\\\", ((BodyContent)out).getString());\");\r\n            writer.println(indent + \"out = pageContext.popBody();\");\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.PrameterTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeExecuteTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String name = node.getAttribute(\"var\");\r\n            String value = this.getValueExpression(node.getAttribute(\"value\"));\r\n\r\n            if(name != null) {\r\n                writer.println(indent + \"pageContext.setAttribute(\\\"\" + name + \"\\\", \" + value + \");\");\r\n            }\r\n            else {\r\n                writer.println(indent + value + \";\");\r\n            }\r\n        }\r\n        else {\r\n            writer.println(indent + \"// jsp.jstl.core.ExecuteTag END\");\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeExitTag(PrintWriter writer, Node node, int index, String indent) {\r\n        if(node.getOffset() == index) {\r\n            String test = node.getAttribute(\"test\");\r\n\r\n            if(test != null) {\r\n                writer.println(indent + \"if(ExpressionUtil.getBoolean(expressionContext, \\\"\" + StringUtil.escape(node.getAttribute(\"test\")) + \"\\\")) {\");\r\n            }\r\n            else {\r\n                writer.println(indent + \"if(com.skin.ayada.jstl.core.ContinueTag.getTrue()) {\");\r\n            }\r\n            writer.println(indent + \"    return;\");\r\n            writer.println(indent + \"}\");\r\n            return Tag.SKIP_BODY;\r\n        }\r\n        writer.println(indent + \"// jsp.jstl.core.ExitTag END\");\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param writer\r\n     * @param node\r\n     * @param index\r\n     * @param indent\r\n     * @return int\r\n     */\r\n    private int writeTag(PrintWriter writer, Node node, int index, String indent) {\r\n        String tagClassName = ((TagNode)node).getTagClassName();\r\n        String tagInstanceName = this.getTagInstanceName(node);\r\n        String parentTagInstanceName = this.getTagInstanceName(node.getParent());\r\n        String startFlagName = this.getVariableName(node, \"_jsp_start_flag_\");\r\n        String flagName = this.getVariableName(node, \"_jsp_flag_\");\r\n        String bodyContentInstanceName = this.getVariableName(node, \"_jsp_body_content_\");\r\n        boolean hasParent = this.hasParent(node);\r\n        boolean isTryCatchFinallyTag = this.isAssignableFrom(tagClassName, TryCatchFinally.class);\r\n        String prefix = indent;\r\n\r\n        if(node.getOffset() == index) {\r\n            writer.println(prefix + tagClassName + \" \" + tagInstanceName + \" = new \" + tagClassName + \"();\");\r\n\r\n            if(isTryCatchFinallyTag) {\r\n                writer.println(prefix + \"try {\");\r\n                prefix = prefix + \"    \";\r\n            }\r\n\r\n            writer.println(prefix + tagInstanceName + \".setPageContext(pageContext);\");\r\n\r\n            if(hasParent) {\r\n                writer.println(prefix + tagInstanceName + \".setParent(\" + parentTagInstanceName + \");\");\r\n            }\r\n            else {\r\n                writer.println(prefix + tagInstanceName + \".setParent((Tag)null);\");\r\n            }\r\n\r\n            this.setAttributes(prefix, tagClassName, tagInstanceName, node.getAttributes(), writer);\r\n\r\n            if(this.isAssignableFrom(tagClassName, SimpleTag.class)) {\r\n                String jspFragmentClassName = this.getVariableName(node, \"JspFragment_\");\r\n                String jspFragmentInstanceName = this.getVariableName(node, \"_jsp_fragment_\");\r\n                writer.println();\r\n                writer.println(prefix + jspFragmentClassName + \" \" + jspFragmentInstanceName + \" = new \" + jspFragmentClassName + \"();\");\r\n                writer.println(prefix + jspFragmentInstanceName + \".setPageContext(pageContext);\");\r\n                writer.println(prefix + jspFragmentInstanceName + \".setParent(\" + tagInstanceName + \");\");\r\n                writer.println();\r\n                writer.println(prefix + tagInstanceName + \".setJspBody(\" + jspFragmentInstanceName + \");\");\r\n                writer.println(prefix + tagInstanceName + \".doTag();\");\r\n                writer.println(prefix + tagInstanceName+ \".release();\");\r\n                return Tag.SKIP_BODY;\r\n            }\r\n            else {\r\n                writer.println(prefix + \"int \" + startFlagName + \" = \" + tagInstanceName + \".doStartTag();\");\r\n                writer.println();\r\n                writer.println(prefix + \"if(\" + startFlagName + \" == Tag.SKIP_PAGE) {\");\r\n                writer.println(prefix + \"    return;\");\r\n                writer.println(prefix + \"}\");\r\n                writer.println(prefix + \"if(\" + startFlagName + \" != Tag.SKIP_BODY) {\");\r\n\r\n                if(node.getLength() > 2) {\r\n                    writer.println(prefix + \"    int \" + flagName + \" = 0;\");\r\n\r\n                    if(this.isAssignableFrom(tagClassName, BodyTag.class)) {\r\n                        writer.println(prefix + \"    if(\" + startFlagName + \" == BodyTag.EVAL_BODY_BUFFERED) {\");\r\n                        writer.println(prefix + \"        BodyContent \" + bodyContentInstanceName + \" = pageContext.pushBody();\");\r\n                        writer.println(prefix + \"        \" + tagInstanceName + \".setBodyContent(\" + bodyContentInstanceName + \");\");\r\n                        writer.println(prefix + \"        \" + tagInstanceName + \".doInitBody();\");\r\n                        writer.println(prefix + \"        out = \" + bodyContentInstanceName + \";\");\r\n                        writer.println(prefix + \"    }\");\r\n                    }\r\n\r\n                    writer.println();\r\n                    writer.println(prefix + \"    do {\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if(isTryCatchFinallyTag) {\r\n                prefix = prefix + \"    \";\r\n            }\r\n\r\n            if(this.isAssignableFrom(tagClassName, SimpleTag.class)) {\r\n            }\r\n            else {\r\n                if(node.getLength() > 2) {\r\n                    if(this.isAssignableFrom(tagClassName, IterationTag.class)) {\r\n                        writer.println(prefix + \"        \" + flagName + \" = \" + tagInstanceName + \".doAfterBody();\");\r\n                    }\r\n\r\n                    writer.println(prefix + \"    }\");\r\n                    writer.println(prefix + \"    while(\" + flagName + \" == IterationTag.EVAL_BODY_AGAIN);\");\r\n\r\n                    if(this.isAssignableFrom(tagClassName, BodyTag.class)) {\r\n                        writer.println(prefix + \"    if(\" + startFlagName + \" == BodyTag.EVAL_BODY_BUFFERED) {\");\r\n                        writer.println(prefix + \"        out = pageContext.popBody();\");\r\n                        writer.println(prefix + \"    }\");\r\n                    }\r\n                }\r\n                else {\r\n                    if(this.isAssignableFrom(tagClassName, IterationTag.class)) {\r\n                        writer.println(prefix + \"    \" + tagInstanceName + \".doAfterBody();\");\r\n                    }\r\n                }\r\n                writer.println(prefix + \"}\");\r\n                writer.println(prefix + tagInstanceName+ \".doEndTag();\");\r\n                writer.println(prefix + tagInstanceName + \".release();\");\r\n            }\r\n\r\n            if(isTryCatchFinallyTag) {\r\n                prefix = prefix.substring(4);\r\n                writer.println(prefix + \"}\");\r\n                writer.println(prefix + \"catch(Throwable throwable) {\");\r\n                writer.println(prefix + \"    try {\");\r\n                writer.println(prefix + \"        \" + tagInstanceName + \".doCatch(throwable);\");\r\n                writer.println(prefix + \"    } catch (Throwable t) {\");\r\n                writer.println(prefix + \"        throw new Exception(t);\");\r\n                writer.println(prefix + \"    }\");\r\n                writer.println(prefix + \"}\");\r\n                writer.println(prefix + \"finally {\");\r\n                writer.println(prefix + \"    \" + tagInstanceName + \".doFinally();\");\r\n                writer.println(prefix + \"}\");\r\n            }\r\n        }\r\n        return Tag.EVAL_PAGE;\r\n    }\r\n\r\n    /**\r\n     * @param expression\r\n     * @return boolean\r\n     */\r\n    protected String getVariable(String expression) {\r\n        List<Node> nodes = ExpressionUtil.parse(expression);\r\n\r\n        if(nodes.size() == 1) {\r\n            Node node = nodes.get(0);\r\n\r\n            if(node instanceof Expression && this.isJavaIdentifier(node.getTextContent())) {\r\n                return node.getTextContent();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param expression\r\n     * @return boolean\r\n     */\r\n    protected boolean isVariable(String expression) {\r\n        List<Node> nodes = ExpressionUtil.parse(expression);\r\n\r\n        if(nodes.size() == 1) {\r\n            Node node = nodes.get(0);\r\n\r\n            if(node instanceof Expression) {\r\n                return this.isJavaIdentifier(node.getTextContent());\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param source\r\n     * @return boolean\r\n     */\r\n    protected boolean isJavaIdentifier(String source) {\r\n        if(Character.isJavaIdentifierStart(source.charAt(0)) == false) {\r\n            return false;\r\n        }\r\n\r\n        for(int i = 0; i < source.length(); i++) {\r\n            if(Character.isJavaIdentifierPart(source.charAt(i)) == false) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param list\r\n     * @param index\r\n     * @return boolean\r\n     */\r\n    protected boolean isTagNode(List<Node> list, int index) {\r\n        if(index < list.size()) {\r\n            Node node = list.get(index);\r\n            int nodeType = node.getNodeType();\r\n\r\n            if(nodeType != NodeType.TEXT && nodeType != NodeType.VARIABLE && nodeType != NodeType.EXPRESSION) {\r\n                if(node.getOffset() == index) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param node\r\n     * @return boolean\r\n     */\r\n    protected boolean hasParent(Node node) {\r\n        Node parent = node.getParent();\r\n\r\n        if(this.fastJstl == false) {\r\n            return (parent != null);\r\n        }\r\n\r\n        if(parent != null && parent instanceof TagNode) {\r\n            String className = ((TagNode)parent).getTagClassName();\r\n            return (FastJstl.has(className) == false);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param indent\r\n     * @param tagClassName\r\n     * @param tagInstanceName\r\n     * @param attributes\r\n     * @param writer\r\n     */\r\n    protected void setAttributes(String indent, String tagClassName, String tagInstanceName, Map<String, String> attributes, PrintWriter writer) {\r\n        if(attributes == null || attributes.size() < 1) {\r\n            return;\r\n        }\r\n\r\n        if(this.isAssignableFrom(tagClassName, DynamicAttributes.class)) {\r\n            for(Map.Entry<String, String> entry : attributes.entrySet()) {\r\n                String name = entry.getKey();\r\n                String value = entry.getValue();\r\n\r\n                if(value.indexOf(\"".toCharArray();
    public static final char[] _jsp_string_11 = "\r\n                else {\r\n                    String valueExpression = this.getValueExpression(value);\r\n                    writer.println(indent + tagInstanceName + \".setDynamicAttribute(\\\"\" + name + \"\\\", \" + valueExpression + \");\");\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        try {\r\n            Class<?> clazz = ClassUtil.getClass(tagClassName);\r\n\r\n            for(Map.Entry<String, String> entry : attributes.entrySet()) {\r\n                String name = entry.getKey();\r\n                String value = entry.getValue();\r\n                String methodName = \"set\" + Character.toUpperCase(name.charAt(0)) + name.substring(1);\r\n                Method method = TagUtil.getSetMethod(clazz, methodName);\r\n\r\n                if(method != null) {\r\n                    Class<?>[] parameterTypes = method.getParameterTypes();\r\n                    Class<?> parameterType = parameterTypes[0];\r\n                    Object parameterValue = null;\r\n\r\n                    /**\r\n                     * constant\r\n                     */\r\n                    if(value.indexOf(\"".toCharArray();
    public static final char[] _jsp_string_13 = "\r\n                        else if(parameterType == boolean.class || parameterType == Boolean.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\" + parameterValue.toString() + \");\");\r\n                        }\r\n                        else if(parameterType == byte.class || parameterType == Byte.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"((byte)\" + ((Number)parameterValue).intValue() + \");\");\r\n                        }\r\n                        else if(parameterType == short.class || parameterType == Short.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"((short)\" + ((Number)parameterValue).intValue() + \");\");\r\n                        }\r\n                        else if(parameterType == int.class || parameterType == Integer.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\" + ((Number)parameterValue).intValue() + \");\");\r\n                        }\r\n                        else if(parameterType == float.class || parameterType == Float.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\" + ((Number)parameterValue).floatValue() + \"f);\");\r\n                        }\r\n                        else if(parameterType == double.class || parameterType == Double.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\" + ((Number)parameterValue).doubleValue() + \"d);\");\r\n                        }\r\n                        else if(parameterType == long.class || parameterType == Long.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\" + ((Number)parameterValue).longValue() + \"L);\");\r\n                        }\r\n                        else if(parameterType == String.class) {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\\\"\" + StringUtil.escape(value) + \"\\\");\");\r\n                        }\r\n                        else if(parameterType == Object.class) {\r\n                            if(parameterValue instanceof Number) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(\" + parameterValue.toString() + \");\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(\\\"\" + StringUtil.escape(value) + \"\\\");\");\r\n                            }\r\n                        }\r\n                        else {\r\n                            writer.println(indent + tagInstanceName + \".\" + methodName + \"(\\\"\" + StringUtil.escape(value) + \"\\\");\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        /**\r\n                         * expression\r\n                         */\r\n                        String variable = this.getVariable(value);\r\n\r\n                        if(parameterType == char.class || parameterType == Character.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getString(\\\"\" + variable + \"\\\").charAt(0));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getString(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\").charAt(0));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == boolean.class || parameterType == Boolean.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getBoolean(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getBoolean(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == byte.class || parameterType == Byte.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getByte(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getByte(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == short.class || parameterType == Short.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getShort(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getShort(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == int.class || parameterType == Integer.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getInteger(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getInteger(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == float.class || parameterType == Float.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getFloat(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getFloat(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == double.class || parameterType == Double.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getDouble(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getDouble(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == long.class || parameterType == Long.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getLong(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getLong(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == String.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getString(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.getString(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\"));\");\r\n                            }\r\n                        }\r\n                        else if(parameterType == Object.class) {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getAttribute(\\\"\" + variable + \"\\\"));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(ExpressionUtil.evaluate(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\", \" + parameterType.getName() + \".class));\");\r\n                            }\r\n                        }\r\n                        else {\r\n                            if(variable != null) {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"(pageContext.getValue(\\\"\" + variable + \"\\\", \" + parameterType.getName() + \".class));\");\r\n                            }\r\n                            else {\r\n                                writer.println(indent + tagInstanceName + \".\" + methodName + \"((\" + parameterType.getName() + \")(ExpressionUtil.evaluate(expressionContext, \\\"\" + StringUtil.escape(value) + \"\\\", \" + parameterType.getName() + \".class)));\");\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch(ClassNotFoundException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param tagClassName\r\n     * @param parent\r\n     * @return boolean\r\n     */\r\n    protected boolean isAssignableFrom(String tagClassName, Class<?> parent) {\r\n        try {\r\n            Class<?> clazz = ClassUtil.getClass(tagClassName);\r\n            return parent.isAssignableFrom(clazz);\r\n        }\r\n        catch(ClassNotFoundException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param node\r\n     * @return String\r\n     */\r\n    protected String getIndent(Node node) {\r\n        Node parent = node;\r\n        int indent = 2;\r\n        StringBuilder buffer = new StringBuilder();\r\n\r\n        if(this.fastJstl) {\r\n            while(parent != null && (parent = parent.getParent()) != null) {\r\n                String tagClassName = ((TagNode)parent).getTagClassName();\r\n\r\n                if(tagClassName.equals(\"com.skin.ayada.jstl.core.ImportTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.IfTag\")) {\r\n                    indent += 1;\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.SetTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.OutTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.ForEachTag\")) {\r\n                    indent += 2;\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.ChooseTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.WhenTag\")) {\r\n                    indent += 1;\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.OtherwiseTag\")) {\r\n                    indent += 1;\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.CommentTag\")) {\r\n                    indent += 1;\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.AttributeTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.PropertyTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.core.PrintTag\")) {\r\n                }\r\n                else if(tagClassName.equals(\"com.skin.ayada.jstl.fmt.DateFormatTag\")) {\r\n                }\r\n                else {\r\n                    indent += 2;\r\n\r\n                    if(this.isAssignableFrom(tagClassName, SimpleTag.class)) {\r\n                        indent -= 1;\r\n                        break;\r\n                    }\r\n\r\n                    if(this.isAssignableFrom(tagClassName, TryCatchFinally.class)) {\r\n                      indent += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            while(parent != null && (parent = parent.getParent()) != null) {\r\n                indent += 2;\r\n                String tagClassName = ((TagNode)parent).getTagClassName();\r\n\r\n                if(this.isAssignableFrom(tagClassName, SimpleTag.class)) {\r\n                    indent -= 1;\r\n                    break;\r\n                }\r\n\r\n                if(this.isAssignableFrom(tagClassName, TryCatchFinally.class)) {\r\n                    indent += 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        for(int i = 0; i < indent; i++) {\r\n            buffer.append(\"    \");\r\n        }\r\n        return buffer.toString();\r\n    }\r\n\r\n    /**\r\n     * @param node\r\n     * @return String\r\n     */\r\n    protected String getTagInstanceName(Node node) {\r\n        if(node != null) {\r\n            String tagClassName = ((TagNode)node).getTagClassName();\r\n            int k = tagClassName.lastIndexOf(\".\");\r\n    \r\n            if(k > -1) {\r\n                return this.getVariableName(node, \"_jsp_\" + tagClassName.substring(k + 1) + \"_\");\r\n            }\r\n            return this.getVariableName(node, \"_jsp_\" + tagClassName + \"_\");\r\n        }\r\n        else {\r\n            return \"_jsp_undefined\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param node\r\n     * @param prefix\r\n     * @return String\r\n     */\r\n    protected String getVariableName(Node node, String prefix) {\r\n        if(node != null) {\r\n            return prefix + (node.getOffset() + 1);\r\n        }\r\n        else {\r\n            return prefix + \"_undefined\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param expression\r\n     * @return String\r\n     */\r\n    protected String getStringExpression(String expression, boolean escapeXml) {\r\n        if(expression != null) {\r\n            if(expression.indexOf(\"".toCharArray();
    public static final char[] _jsp_string_15 = "\r\n                return \"ExpressionUtil.getString(expressionContext, \\\"\" + StringUtil.escape(expression) + \"\\\")\";\r\n            }\r\n            Object constant = ExpressionUtil.getValue(expression);\r\n\r\n            if(constant instanceof String) {\r\n                if(escapeXml) {\r\n                    return \"\\\"\" + StringUtil.escape(HtmlUtil.encode(expression)) + \"\\\"\";\r\n                }\r\n                return \"\\\"\" + StringUtil.escape(expression) + \"\\\"\";\r\n            }\r\n            else if(constant instanceof Float) {\r\n                return constant.toString() + \"f\";\r\n            }\r\n            else if(constant instanceof Double) {\r\n                return constant.toString() + \"d\";\r\n            }\r\n            else if(constant instanceof Long) {\r\n                return constant.toString() + \"L\";\r\n            }\r\n            return constant.toString();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param expression\r\n     * @return String\r\n     */\r\n    protected String getValueExpression(String expression) {\r\n        if(expression != null) {\r\n            List<Node> nodes = ExpressionUtil.parse(expression);\r\n\r\n            if(nodes.size() == 1) {\r\n                Node node = nodes.get(0);\r\n\r\n                if(node instanceof Expression) {\r\n                    if(this.isJavaIdentifier(node.getTextContent())) {\r\n                        return \"pageContext.getAttribute(\\\"\" + node.getTextContent() + \"\\\")\";\r\n                    }\r\n                    return \"ExpressionUtil.evaluate(expressionContext, \\\"\" + StringUtil.escape(expression) + \"\\\", null)\";\r\n                }\r\n                Object constant = ExpressionUtil.getValue(node.getTextContent());\r\n\r\n                if(constant instanceof String) {\r\n                    return \"\\\"\" + StringUtil.escape(expression) + \"\\\"\";\r\n                }\r\n                else if(constant instanceof Float) {\r\n                    return constant.toString() + \"f\";\r\n                }\r\n                else if(constant instanceof Double) {\r\n                    return constant.toString() + \"d\";\r\n                }\r\n                else if(constant instanceof Long) {\r\n                    return constant.toString() + \"L\";\r\n                }\r\n                else {\r\n                    return constant.toString();\r\n                }\r\n            }\r\n            return \"ExpressionUtil.evaluate(expressionContext, \\\"\" + StringUtil.escape(expression) + \"\\\", null)\";\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param resource\r\n     * @return String\r\n     */\r\n    public static String getJavaTemplate(String resource) {\r\n        InputStreamReader inputStreamReader = null;\r\n        InputStream inputStream = JspCompiler.class.getResourceAsStream(resource);\r\n\r\n        try {\r\n            StringBuilder buffer = new StringBuilder(2048);\r\n            inputStreamReader = new InputStreamReader(inputStream, \"UTF-8\");\r\n\r\n            int length = 0;\r\n            char[] cbuf = new char[2048];\r\n\r\n            while((length = inputStreamReader.read(cbuf)) > 0) {\r\n                buffer.append(cbuf, 0, length);\r\n            }\r\n            return buffer.toString();\r\n        }\r\n        catch(IOException e) {\r\n            logger.warn(e.getMessage(), e);\r\n        }\r\n        finally {\r\n            if(inputStream != null) {\r\n                try {\r\n                    inputStream.close();\r\n                }\r\n                catch(IOException e) {\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param source\r\n     * @param context\r\n     * @return String\r\n     */\r\n    public String replace(String source, Map<String, String> context) {\r\n        char c;\r\n        StringBuilder name = new StringBuilder();\r\n        CharBuffer result = new CharBuffer(4096);\r\n\r\n        for(int i = 0; i < source.length(); i++) {\r\n            c = source.charAt(i);\r\n\r\n            if(c == \'$\' && i < source.length() - 1 && source.charAt(i + 1) == \'{\') {\r\n                for(int j = i + 2; j < source.length(); j++) {\r\n                    i = j;\r\n                    c = source.charAt(j);\r\n\r\n                    if(c == \'}\') {\r\n                        String value = context.get(name.toString());\r\n\r\n                        if(value != null) {\r\n                            result.append(value);\r\n                        }\r\n                        break;\r\n                    }\r\n                    else {\r\n                        name.append(c);\r\n                    }\r\n                }\r\n                name.setLength(0);\r\n            }\r\n            else {\r\n                result.append(c);\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n\r\n    /**\r\n     * @param fastJstl the fastJstl to set\r\n     */\r\n    public void setFastJstl(boolean fastJstl) {\r\n        this.fastJstl = fastJstl;\r\n    }\r\n\r\n    /**\r\n     * @return the fastJstl\r\n     */\r\n    public boolean getFastJstl() {\r\n        return this.fastJstl;\r\n    }\r\n}\r\n".toCharArray();

}
