/*
 * $RCSfile: ClipTestTemplate.java,v $$
 * $Revision: 1.1 $
 * $Date: 2016-01-13 $
 *
 * Copyright (C) 2008 Skin, Inc. All rights reserved.
 *
 * This software is the proprietary information of Skin, Inc.
 * Use is subject to license terms.
 *
 * home: D:/workspace2/ayada/webapp
 * path: clipTest.jsp
 * lastModified: 2016-01-13 18:40:20 491
 * options: -fastJstl true
 * JSP generated by JspCompiler-1.0.1.2 (built 2016-01-13 18:43:05 975)
 */
package _tpl._jsp;

import java.io.Writer;
import com.skin.ayada.runtime.ExpressionContext;
import com.skin.ayada.runtime.JspWriter;
import com.skin.ayada.runtime.PageContext;
import com.skin.ayada.tagext.BodyContent;
import com.skin.ayada.tagext.BodyTag;
import com.skin.ayada.tagext.IterationTag;
import com.skin.ayada.tagext.JspFragment;
import com.skin.ayada.tagext.Tag;
import com.skin.ayada.template.JspTemplate;
import com.skin.ayada.util.ExpressionUtil;


/**
 * <p>Title: ClipTestTemplate</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2006</p>
 * @author JspCompiler
 * @version 1.0
 */
@SuppressWarnings("unused")
public class ClipTestTemplate extends JspTemplate {
    public static void main(String[] args){
        java.io.StringWriter writer = new java.io.StringWriter();
        PageContext pageContext = com.skin.ayada.runtime.JspFactory.getPageContext(writer);
        ClipTestTemplate template = new ClipTestTemplate();

        try {
            template.execute(pageContext);
            System.out.println(writer.toString());
        }
        catch(Throwable throwable) {
            throwable.printStackTrace();
        }
    }

    /**
     * @param pageContext
     * @throws Throwable
     */
    @Override
    @SuppressWarnings("unchecked")
    public void _execute(final PageContext pageContext) throws Throwable {
        JspWriter out = pageContext.getOut();
        JspWriter jspWriter = pageContext.getOut();
        ExpressionContext expressionContext = pageContext.getExpressionContext();
        // jsp:directive.page: lineNumber: 1
        // <jsp:directive.page contentType="text/html; charset=utf-8" pageEncoding="utf-8"/>

        // TEXT: lineNumber: 1
        // out.write("\r\n");
        out.write(_jsp_string_3, 0, _jsp_string_3.length);
        // TEXT: lineNumber: 1
        // out.write("<div>\r\n    <h3>");
        out.write(_jsp_string_4, 0, _jsp_string_4.length);
        // EXPRESSION: lineNumber: 2
        expressionContext.print(out, expressionContext.getString("template.home"));
        // TEXT: lineNumber: 2
        // out.write("/include/header.jsp</h3>\r\n    <div class=\"wrap\">header</div>\r\n</div>\r\n");
        out.write(_jsp_string_6, 0, _jsp_string_6.length);

        // jsp:directive.include: lineNumber: 3
        // <jsp:directive.include include="" file="/include/header.jsp"/>

        // TEXT: lineNumber: 3
        // out.write("\r\n");
        out.write(_jsp_string_9, 0, _jsp_string_9.length);

        // jsp:scriptlet: lineNumber: 5
int a=1; 
        // jsp:scriptlet END

        // TEXT: lineNumber: 5
        // out.write("\r\n\r\n<h1>header</h1>\r\n<p>Clip Test</p>\r\n");
        out.write(_jsp_string_12, 0, _jsp_string_12.length);

        // NODE START: lineNumber: 11, offset: 12, length: 2, tagClassName: com.skin.ayada.jstl.core.SetTag, tagInstanceName: _jsp_SetTag_13
        // <c:set var=\"myVar1\" value=\"123\"/>
        pageContext.setAttribute("myVar1", 123);
        // jsp.jstl.core.SetTag END
        // NODE END: lineNumber: 11, tagClassName: com.skin.ayada.jstl.core.SetTag, tagInstanceName: _jsp_SetTag_13

        // TEXT: lineNumber: 11
        // out.write("   #### 1\r\n");
        out.write(_jsp_string_15, 0, _jsp_string_15.length);

        // NODE START: lineNumber: 13, offset: 15, length: 5, tagClassName: com.skin.ayada.jstl.core.ForEachTag, tagInstanceName: _jsp_ForEachTag_16
        // <c:forEach var=\"myVar\" items=\"1,2,3\">...</c:forEach>
        Object _jsp_old_var_16 = pageContext.getAttribute("myVar");
        com.skin.ayada.jstl.core.ForEachTag _jsp_ForEachTag_16 = new com.skin.ayada.jstl.core.ForEachTag();
        _jsp_ForEachTag_16.setParent((Tag)null);
        _jsp_ForEachTag_16.setPageContext(pageContext);
        _jsp_ForEachTag_16.setVar("myVar");
        _jsp_ForEachTag_16.setItems("1,2,3");
        if(_jsp_ForEachTag_16.doStartTag() != Tag.SKIP_BODY) {
            while(true) {
                // TEXT: lineNumber: 13
                // out.write("    <p>");
                out.write(_jsp_string_17, 0, _jsp_string_17.length);
                // VARIABLE: lineNumber: 14
                expressionContext.print(out, pageContext.getAttribute("myVar"));
                // TEXT: lineNumber: 14
                // out.write("</p>\r\n");
                out.write(_jsp_string_19, 0, _jsp_string_19.length);
                if(_jsp_ForEachTag_16.doAfterBody() != IterationTag.EVAL_BODY_AGAIN) {
                    break;
                }
            }
        }
        _jsp_ForEachTag_16.release();
        pageContext.setAttribute("myVar", _jsp_old_var_16);
        // jsp.jstl.core.ForEachTag END
        // NODE END: lineNumber: 13, tagClassName: com.skin.ayada.jstl.core.ForEachTag, tagInstanceName: _jsp_ForEachTag_16

        // TEXT: lineNumber: 15
        // out.write("\r\n\r\n\r\n### 2\r\n");
        out.write(_jsp_string_21, 0, _jsp_string_21.length);

        // NODE START: lineNumber: 20, offset: 21, length: 8, tagClassName: com.skin.ayada.jstl.core.ChooseTag, tagInstanceName: _jsp_ChooseTag_22
        // <c:choose>...</c:choose>
        boolean _jsp_ChooseTag_22 = true;

        // NODE START: lineNumber: 21, offset: 22, length: 3, tagClassName: com.skin.ayada.jstl.core.WhenTag, tagInstanceName: _jsp_WhenTag_23
        // <c:when test=\"${1 == 1}\">...</c:when>
        if(_jsp_ChooseTag_22 && ExpressionUtil.getBoolean(expressionContext, "${1 == 1}")) {
            _jsp_ChooseTag_22 = false;
            // TEXT: lineNumber: 21
            // out.write("        Hello !\r\n");
            out.write(_jsp_string_24, 0, _jsp_string_24.length);
        } // jsp.jstl.core.WhenTag END
        // NODE END: lineNumber: 21, tagClassName: com.skin.ayada.jstl.core.WhenTag, tagInstanceName: _jsp_WhenTag_23

        // NODE START: lineNumber: 24, offset: 25, length: 3, tagClassName: com.skin.ayada.jstl.core.WhenTag, tagInstanceName: _jsp_WhenTag_26
        // <c:when test=\"${1 == 1}\">...</c:when>
        if(_jsp_ChooseTag_22 && ExpressionUtil.getBoolean(expressionContext, "${1 == 1}")) {
            _jsp_ChooseTag_22 = false;
            // TEXT: lineNumber: 24
            // out.write("        Hi !\r\n");
            out.write(_jsp_string_27, 0, _jsp_string_27.length);
        } // jsp.jstl.core.WhenTag END
        // NODE END: lineNumber: 24, tagClassName: com.skin.ayada.jstl.core.WhenTag, tagInstanceName: _jsp_WhenTag_26

        // jsp.jstl.core.ChooseTag END
        // NODE END: lineNumber: 20, tagClassName: com.skin.ayada.jstl.core.ChooseTag, tagInstanceName: _jsp_ChooseTag_22

        // TEXT: lineNumber: 27
        // out.write("\r\n### 3\r\n<p>test</p>\r\n<p>test</p>\r\n### 4\r\n\r\n");
        out.write(_jsp_string_30, 0, _jsp_string_30.length);

        // jsp:scriptlet: lineNumber: 37
    for(int i = 0; i < 3; i++) {
    
        // jsp:scriptlet END

        // TEXT: lineNumber: 39
        // out.write("<p>");
        out.write(_jsp_string_33, 0, _jsp_string_33.length);

        // jsp:expression: lineNumber: 40
        expressionContext.print(out, (i));
        // jsp:expression END

        // TEXT: lineNumber: 40
        // out.write("</p>\r\n");
        out.write(_jsp_string_36, 0, _jsp_string_36.length);

        // jsp:scriptlet: lineNumber: 41
     }

        // jsp:scriptlet END

        // TEXT: lineNumber: 43
        // out.write("\r\n### 5\r\n");
        out.write(_jsp_string_39, 0, _jsp_string_39.length);

        // jsp:scriptlet: lineNumber: 47
    for(int i = 0; i < 3; i++) {
    
        // jsp:scriptlet END

        // TEXT: lineNumber: 49
        // out.write("<p>");
        out.write(_jsp_string_42, 0, _jsp_string_42.length);

        // jsp:expression: lineNumber: 49
        expressionContext.print(out, (i));
        // jsp:expression END

        // TEXT: lineNumber: 49
        // out.write("</p>\r\n");
        out.write(_jsp_string_45, 0, _jsp_string_45.length);

        // jsp:scriptlet: lineNumber: 51
     }

        // jsp:scriptlet END

        // TEXT: lineNumber: 54
        // out.write("## 6\r\n这是一个格式处理的测试页面，测试编译程序的clip函数是否正确。\r\n编译程序对标签的处理规则：\r\n1. jsp指令、jsp生命、jsp脚本、Ayada指令，都会统一删除掉前导空格和后缀回车。不支持配置，统一处理。\r\n2. 标签配置增加ignore-whitespace选项，可选值[true|false]，如果是true，删除掉前导空格和后面的回车。默认是true。t:import指令对应的属性是ignoreWhitespace。\r\n前导空格包括空格和\\t符。\r\n后缀回车包括\\r和\\n。只删除第一个回车。\r\n\r\n编译程序在编译出来所有节点列表之后，会对节点列表进行两次扫描：\r\n1. 第一次扫描，根据标签的ignoreWhitespace定义决定是否对标签做格式处理。\r\n   如果ignoreWhitespace为true，则删除标签的前导空格，前导空格是指标签前面的第一个文本节点的尾空格。\r\n   删除标签之后的第一个回车换行符。标签的开始节点和结束节点都按照这个的规则处理。所有的jsp指令、脚本、声明也按照这个规则处理。\r\n\r\n2. 第二次扫描，根据标签的bodyContent定义清除标签内的文本节点或者。\r\n\r\n总的原则是：标签或者脚本所占的行不输出。即：把标签或者脚本所占的行删除之后就是最终输出的格式。 \r\n");
        out.write(_jsp_string_48, 0, _jsp_string_48.length);

        out.flush();
        jspWriter.flush();
    }

    public static final char[] _jsp_string_3 = "\r\n".toCharArray();
    public static final char[] _jsp_string_4 = "<div>\r\n    <h3>".toCharArray();
    public static final char[] _jsp_string_6 = "/include/header.jsp</h3>\r\n    <div class=\"wrap\">header</div>\r\n</div>\r\n".toCharArray();
    public static final char[] _jsp_string_9 = "\r\n".toCharArray();
    public static final char[] _jsp_string_12 = "\r\n\r\n<h1>header</h1>\r\n<p>Clip Test</p>\r\n".toCharArray();
    public static final char[] _jsp_string_15 = "   #### 1\r\n".toCharArray();
    public static final char[] _jsp_string_17 = "    <p>".toCharArray();
    public static final char[] _jsp_string_19 = "</p>\r\n".toCharArray();
    public static final char[] _jsp_string_21 = "\r\n\r\n\r\n### 2\r\n".toCharArray();
    public static final char[] _jsp_string_24 = "        Hello !\r\n".toCharArray();
    public static final char[] _jsp_string_27 = "        Hi !\r\n".toCharArray();
    public static final char[] _jsp_string_30 = "\r\n### 3\r\n<p>test</p>\r\n<p>test</p>\r\n### 4\r\n\r\n".toCharArray();
    public static final char[] _jsp_string_33 = "<p>".toCharArray();
    public static final char[] _jsp_string_36 = "</p>\r\n".toCharArray();
    public static final char[] _jsp_string_39 = "\r\n### 5\r\n".toCharArray();
    public static final char[] _jsp_string_42 = "<p>".toCharArray();
    public static final char[] _jsp_string_45 = "</p>\r\n".toCharArray();
    public static final char[] _jsp_string_48 = "## 6\r\n这是一个格式处理的测试页面，测试编译程序的clip函数是否正确。\r\n编译程序对标签的处理规则：\r\n1. jsp指令、jsp生命、jsp脚本、Ayada指令，都会统一删除掉前导空格和后缀回车。不支持配置，统一处理。\r\n2. 标签配置增加ignore-whitespace选项，可选值[true|false]，如果是true，删除掉前导空格和后面的回车。默认是true。t:import指令对应的属性是ignoreWhitespace。\r\n前导空格包括空格和\\t符。\r\n后缀回车包括\\r和\\n。只删除第一个回车。\r\n\r\n编译程序在编译出来所有节点列表之后，会对节点列表进行两次扫描：\r\n1. 第一次扫描，根据标签的ignoreWhitespace定义决定是否对标签做格式处理。\r\n   如果ignoreWhitespace为true，则删除标签的前导空格，前导空格是指标签前面的第一个文本节点的尾空格。\r\n   删除标签之后的第一个回车换行符。标签的开始节点和结束节点都按照这个的规则处理。所有的jsp指令、脚本、声明也按照这个规则处理。\r\n\r\n2. 第二次扫描，根据标签的bodyContent定义清除标签内的文本节点或者。\r\n\r\n总的原则是：标签或者脚本所占的行不输出。即：把标签或者脚本所占的行删除之后就是最终输出的格式。 \r\n".toCharArray();

}
