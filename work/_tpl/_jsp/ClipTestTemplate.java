/*
 * $RCSfile: ClipTestTemplate.java,v $$
 * $Revision: 1.1 $
 * $Date: 2016-01-21 $
 *
 * Copyright (C) 2008 Skin, Inc. All rights reserved.
 *
 * This software is the proprietary information of Skin, Inc.
 * Use is subject to license terms.
 *
 * home: E:/WorkSpace/ayada/webapp
 * path: clipTest.jsp
 * lastModified: 2016-01-19 10:39:30 000
 * options: -fastJstl true
 * template.dependencies
 * -- /clipTest.jsp
 * -- /include/header.jsp
 *
 * JSP generated by JspCompiler-1.0.1.2 (built 2016-01-21 00:19:10 845)
 */
package _tpl._jsp;

import java.io.Writer;
import com.skin.ayada.runtime.ExpressionContext;
import com.skin.ayada.runtime.JspWriter;
import com.skin.ayada.runtime.PageContext;
import com.skin.ayada.tagext.BodyContent;
import com.skin.ayada.tagext.BodyTag;
import com.skin.ayada.tagext.IterationTag;
import com.skin.ayada.tagext.JspFragment;
import com.skin.ayada.tagext.Tag;
import com.skin.ayada.template.JspTemplate;
import com.skin.ayada.util.ExpressionUtil;


/**
 * <p>Title: ClipTestTemplate</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2006</p>
 * @author JspCompiler
 * @version 1.0
 */
@SuppressWarnings("unused")
public class ClipTestTemplate extends JspTemplate {
    public static void main(String[] args){
        java.io.StringWriter writer = new java.io.StringWriter();
        PageContext pageContext = com.skin.ayada.runtime.JspFactory.getPageContext(writer);
        ClipTestTemplate template = new ClipTestTemplate();

        try {
            template.execute(pageContext);
            System.out.println(writer.toString());
        }
        catch(Throwable throwable) {
            throwable.printStackTrace();
        }
    }

    /**
     * @param pageContext
     * @throws Throwable
     */
    @Override
    @SuppressWarnings("unchecked")
    public void _execute(final PageContext pageContext) throws Throwable {
        JspWriter out = pageContext.getOut();
        JspWriter jspWriter = pageContext.getOut();
        ExpressionContext expressionContext = pageContext.getExpressionContext();
        // jsp:directive.page: lineNumber: 1
        // <jsp:directive.page contentType="text/html; charset=utf-8" pageEncoding="utf-8"/>

        // TEXT: lineNumber: 1
        // out.write("\r\n### 1\r\n    <p>\r\n");
        out.write(_jsp_string_3, 0, _jsp_string_3.length);

        // NODE START: lineNumber: 6, offset: 3, length: 3, tagClassName: com.skin.ayada.jstl.core.IfTag, tagInstanceName: _jsp_IfTag_4
        // <c:if test=\"${1 == 1}\">...</c:if>
        if(ExpressionUtil.getBoolean(expressionContext, "${1 == 1}")) {
            // TEXT: lineNumber: 6
            // out.write("Hello world !");
            out.write(_jsp_string_5, 0, _jsp_string_5.length);
        } // jsp.jstl.core.IfTag END
        // NODE END: lineNumber: 6, tagClassName: com.skin.ayada.jstl.core.IfTag, tagInstanceName: _jsp_IfTag_4

        // TEXT: lineNumber: 6
        // out.write("    </p>\r\n\r\n### 2\r\n    <p>\r\n            ");
        out.write(_jsp_string_7, 0, _jsp_string_7.length);

        // NODE START: lineNumber: 11, offset: 7, length: 5, tagClassName: com.skin.ayada.jstl.core.DefaultTag, tagInstanceName: _jsp_DefaultTag_8
        // <c:any>...</c:any>
        com.skin.ayada.jstl.core.DefaultTag _jsp_DefaultTag_8 = new com.skin.ayada.jstl.core.DefaultTag();
        _jsp_DefaultTag_8.setPageContext(pageContext);
        _jsp_DefaultTag_8.setParent((Tag)null);
        int _jsp_start_flag_8 = _jsp_DefaultTag_8.doStartTag();

        if(_jsp_start_flag_8 == Tag.SKIP_PAGE) {
            return;
        }
        if(_jsp_start_flag_8 != Tag.SKIP_BODY) {
            int _jsp_flag_8 = 0;

            do {
                // NODE START: lineNumber: 11, offset: 8, length: 3, tagClassName: com.skin.ayada.jstl.core.IfTag, tagInstanceName: _jsp_IfTag_9
                // <c:if test=\"${1 == 1}\">...</c:if>
                if(ExpressionUtil.getBoolean(expressionContext, "${1 == 1}")) {
                    // TEXT: lineNumber: 11
                    // out.write("Hello world !");
                    out.write(_jsp_string_10, 0, _jsp_string_10.length);
                } // jsp.jstl.core.IfTag END
                // NODE END: lineNumber: 11, tagClassName: com.skin.ayada.jstl.core.IfTag, tagInstanceName: _jsp_IfTag_9

                _jsp_flag_8 = _jsp_DefaultTag_8.doAfterBody();
            }
            while(_jsp_flag_8 == IterationTag.EVAL_BODY_AGAIN);
        }
        _jsp_DefaultTag_8.doEndTag();
        _jsp_DefaultTag_8.release();
        // NODE END: lineNumber: 11, tagClassName: com.skin.ayada.jstl.core.DefaultTag, tagInstanceName: _jsp_DefaultTag_8

        // TEXT: lineNumber: 11
        // out.write("\r\n    </p>\r\n\r\n");
        out.write(_jsp_string_13, 0, _jsp_string_13.length);
        // TEXT: lineNumber: 1
        // out.write("<div>\r\n    <h3>");
        out.write(_jsp_string_14, 0, _jsp_string_14.length);
        // EXPRESSION: lineNumber: 2
        expressionContext.print(out, expressionContext.getString("template.home"));
        // TEXT: lineNumber: 2
        // out.write("/include/header.jsp</h3>\r\n    <div class=\"wrap\">header</div>\r\n</div>\r\n");
        out.write(_jsp_string_16, 0, _jsp_string_16.length);

        // jsp:directive.include: lineNumber: 14
        // <jsp:directive.include include="" file="/include/header.jsp"/>

        // TEXT: lineNumber: 14
        // out.write("\r\n");
        out.write(_jsp_string_19, 0, _jsp_string_19.length);

        // jsp:scriptlet: lineNumber: 16
int a=1; 
        // jsp:scriptlet END

        // jsp:scriptlet: lineNumber: 17

        // jsp:scriptlet END

        // TEXT: lineNumber: 17
        // out.write("\r\n<h1>header</h1>\r\n<p>Clip Test</p>\r\n");
        out.write(_jsp_string_24, 0, _jsp_string_24.length);

        // NODE START: lineNumber: 22, offset: 24, length: 2, tagClassName: com.skin.ayada.jstl.core.SetTag, tagInstanceName: _jsp_SetTag_25
        // <c:set var=\"myVar1\" value=\"123\"/>
        pageContext.setAttribute("myVar1", 123);
        // jsp.jstl.core.SetTag END
        // NODE END: lineNumber: 22, tagClassName: com.skin.ayada.jstl.core.SetTag, tagInstanceName: _jsp_SetTag_25

        // TEXT: lineNumber: 22
        // out.write("   #### 1\r\n");
        out.write(_jsp_string_27, 0, _jsp_string_27.length);

        // NODE START: lineNumber: 24, offset: 27, length: 5, tagClassName: com.skin.ayada.jstl.core.ForEachTag, tagInstanceName: _jsp_ForEachTag_28
        // <c:forEach var=\"myVar\" items=\"1,2,3\">...</c:forEach>
        Object _jsp_old_var_28 = pageContext.getAttribute("myVar");
        com.skin.ayada.jstl.core.ForEachTag _jsp_ForEachTag_28 = new com.skin.ayada.jstl.core.ForEachTag();
        _jsp_ForEachTag_28.setParent((Tag)null);
        _jsp_ForEachTag_28.setPageContext(pageContext);
        _jsp_ForEachTag_28.setVar("myVar");
        _jsp_ForEachTag_28.setItems("1,2,3");
        if(_jsp_ForEachTag_28.doStartTag() != Tag.SKIP_BODY) {
            while(true) {
                // TEXT: lineNumber: 24
                // out.write("    <p>");
                out.write(_jsp_string_29, 0, _jsp_string_29.length);
                // VARIABLE: lineNumber: 25
                expressionContext.print(out, pageContext.getAttribute("myVar"));
                // TEXT: lineNumber: 25
                // out.write("</p>\r\n");
                out.write(_jsp_string_31, 0, _jsp_string_31.length);
                if(_jsp_ForEachTag_28.doAfterBody() != IterationTag.EVAL_BODY_AGAIN) {
                    break;
                }
            }
        }
        _jsp_ForEachTag_28.release();
        pageContext.setAttribute("myVar", _jsp_old_var_28);
        // jsp.jstl.core.ForEachTag END
        // NODE END: lineNumber: 24, tagClassName: com.skin.ayada.jstl.core.ForEachTag, tagInstanceName: _jsp_ForEachTag_28

        // TEXT: lineNumber: 26
        // out.write("### 2\r\n");
        out.write(_jsp_string_33, 0, _jsp_string_33.length);

        // NODE START: lineNumber: 28, offset: 33, length: 8, tagClassName: com.skin.ayada.jstl.core.ChooseTag, tagInstanceName: _jsp_ChooseTag_34
        // <c:choose>...</c:choose>
        boolean _jsp_ChooseTag_34 = true;

        // NODE START: lineNumber: 29, offset: 34, length: 3, tagClassName: com.skin.ayada.jstl.core.WhenTag, tagInstanceName: _jsp_WhenTag_35
        // <c:when test=\"${1 == 1}\">...</c:when>
        if(_jsp_ChooseTag_34 && ExpressionUtil.getBoolean(expressionContext, "${1 == 1}")) {
            _jsp_ChooseTag_34 = false;
            // TEXT: lineNumber: 29
            // out.write("        Hello !\r\n");
            out.write(_jsp_string_36, 0, _jsp_string_36.length);
        } // jsp.jstl.core.WhenTag END
        // NODE END: lineNumber: 29, tagClassName: com.skin.ayada.jstl.core.WhenTag, tagInstanceName: _jsp_WhenTag_35

        // NODE START: lineNumber: 32, offset: 37, length: 3, tagClassName: com.skin.ayada.jstl.core.WhenTag, tagInstanceName: _jsp_WhenTag_38
        // <c:when test=\"${1 == 1}\">...</c:when>
        if(_jsp_ChooseTag_34 && ExpressionUtil.getBoolean(expressionContext, "${1 == 1}")) {
            _jsp_ChooseTag_34 = false;
            // TEXT: lineNumber: 32
            // out.write("        Hi !\r\n");
            out.write(_jsp_string_39, 0, _jsp_string_39.length);
        } // jsp.jstl.core.WhenTag END
        // NODE END: lineNumber: 32, tagClassName: com.skin.ayada.jstl.core.WhenTag, tagInstanceName: _jsp_WhenTag_38

        // jsp.jstl.core.ChooseTag END
        // NODE END: lineNumber: 28, tagClassName: com.skin.ayada.jstl.core.ChooseTag, tagInstanceName: _jsp_ChooseTag_34

        // TEXT: lineNumber: 35
        // out.write("\r\n### 3\r\n<p>test</p>\r\n\r\n\r\n<p>test</p>\r\n### 4\r\n\r\n");
        out.write(_jsp_string_42, 0, _jsp_string_42.length);

        // jsp:scriptlet: lineNumber: 47
    for(int i = 0; i < 3; i++) {
    
        // jsp:scriptlet END

        // TEXT: lineNumber: 49
        // out.write("<p>");
        out.write(_jsp_string_45, 0, _jsp_string_45.length);

        // jsp:expression: lineNumber: 50
        expressionContext.print(out, (i));
        // jsp:expression END

        // TEXT: lineNumber: 50
        // out.write("</p>\r\n");
        out.write(_jsp_string_48, 0, _jsp_string_48.length);

        // jsp:scriptlet: lineNumber: 51
     }

        // jsp:scriptlet END

        // TEXT: lineNumber: 53
        // out.write("\r\n### 5\r\n");
        out.write(_jsp_string_51, 0, _jsp_string_51.length);

        // jsp:scriptlet: lineNumber: 56

    for(int i = 0; i < 3; i++) {
    
        // jsp:scriptlet END

        // TEXT: lineNumber: 58
        // out.write("<p>");
        out.write(_jsp_string_54, 0, _jsp_string_54.length);

        // jsp:expression: lineNumber: 59
        expressionContext.print(out, (i));
        // jsp:expression END

        // TEXT: lineNumber: 59
        // out.write("</p>\r\n");
        out.write(_jsp_string_57, 0, _jsp_string_57.length);

        // jsp:scriptlet: lineNumber: 60

     }

        // jsp:scriptlet END

        // TEXT: lineNumber: 62
        // out.write("\r\nc:remove的bodyContent为empty, 之前的版本有一个bug, 成对闭合的标签如果bodyContent为empty的时候，会忽略掉结束标签后面的所有回车。如果写成自关闭则没有这个问题。\r\n该问题已经修复。\r\n");
        out.write(_jsp_string_60, 0, _jsp_string_60.length);

        // NODE START: lineNumber: 66, offset: 60, length: 2, tagClassName: com.skin.ayada.jstl.core.RemoveTag, tagInstanceName: _jsp_RemoveTag_61
        // <c:remove var=\"a\">...</c:remove>
        com.skin.ayada.jstl.core.RemoveTag _jsp_RemoveTag_61 = new com.skin.ayada.jstl.core.RemoveTag();
        _jsp_RemoveTag_61.setPageContext(pageContext);
        _jsp_RemoveTag_61.setParent((Tag)null);
        _jsp_RemoveTag_61.setVar("a");
        int _jsp_start_flag_61 = _jsp_RemoveTag_61.doStartTag();

        if(_jsp_start_flag_61 == Tag.SKIP_PAGE) {
            return;
        }
        if(_jsp_start_flag_61 != Tag.SKIP_BODY) {
            _jsp_RemoveTag_61.doAfterBody();
        }
        _jsp_RemoveTag_61.doEndTag();
        _jsp_RemoveTag_61.release();
        // NODE END: lineNumber: 66, tagClassName: com.skin.ayada.jstl.core.RemoveTag, tagInstanceName: _jsp_RemoveTag_61

        // TEXT: lineNumber: 66
        // out.write("\r\n\r\n\r\n## 6\r\n这是一个格式处理的测试页面，测试编译程序的clip函数是否正确。\r\n格式处理必须有一个规则，这样编译程序才知道如何处理空格和回车。编译程序对标签的处理规则：\r\n1. jsp指令、jsp生命、jsp脚本、Ayada指令，都会统一删除掉前导空格和后缀回车。不支持配置，统一处理。\r\n2. 标签配置增加ignore-whitespace选项，可选值[true|false]，如果是true，删除掉前导空格和后面的回车。默认是true。t:import指令对应的属性是ignoreWhitespace。\r\n前导空格包括空格和\\t符。\r\n后缀回车包括\\r和\\n。只删除第一个回车。\r\n\r\n编译程序在编译出来所有节点列表之后，会对节点列表进行两次扫描：\r\n1. 第一次扫描，根据标签的ignoreWhitespace定义决定是否对标签做格式处理。\r\n   如果ignoreWhitespace为true，则删除标签的前导空格，前导空格是指标签前面的第一个文本节点的尾空格。\r\n   删除标签之后的第一个回车换行符。标签的开始节点和结束节点都按照这个的规则处理。所有的jsp指令、脚本、声明也按照这个规则处理。\r\n\r\n2. 第二次扫描，根据标签的bodyContent定义清除标签内的文本节点或者。\r\n\r\n总的原则是：标签或者脚本所占的行不输出。即：把标签或者脚本所占的行删除之后就是最终输出的格式。\r\n\r\n这个规则会导致一些输出可能不符合编写者的意图，例如：\r\n<div>\r\n    <div>\r\n");
        out.write(_jsp_string_63, 0, _jsp_string_63.length);

        // NODE START: lineNumber: 90, offset: 63, length: 3, tagClassName: com.skin.ayada.jstl.core.IfTag, tagInstanceName: _jsp_IfTag_64
        // <c:if test=\"${1 == 1}\">...</c:if>
        if(ExpressionUtil.getBoolean(expressionContext, "${1 == 1}")) {
            // TEXT: lineNumber: 90
            // out.write("<p>hello</p>");
            out.write(_jsp_string_65, 0, _jsp_string_65.length);
        } // jsp.jstl.core.IfTag END
        // NODE END: lineNumber: 90, tagClassName: com.skin.ayada.jstl.core.IfTag, tagInstanceName: _jsp_IfTag_64

        // TEXT: lineNumber: 90
        // out.write("    </div>\r\n</div>\r\n我们希望的输出格式应该是如下的样子：\r\n<div>\r\n    <div>\r\n        <p>hello</p>\r\n    </div>\r\n</div>\r\n但由于上面对格式的处理规则：标签必须独占一行，导致输出是下面的样子：\r\n<div>\r\n    <div>\r\n<p>hello</p>    </div>\r\n</div>\r\n一个简单的解决办法是把标签独占一行，改成如下的样子：\r\n<div>\r\n    <div>\r\n");
        out.write(_jsp_string_67, 0, _jsp_string_67.length);

        // NODE START: lineNumber: 107, offset: 67, length: 3, tagClassName: com.skin.ayada.jstl.core.IfTag, tagInstanceName: _jsp_IfTag_68
        // <c:if test=\"${1 == 1}\">...</c:if>
        if(ExpressionUtil.getBoolean(expressionContext, "${1 == 1}")) {
            // TEXT: lineNumber: 107
            // out.write("        <p>hello</p>\r\n");
            out.write(_jsp_string_69, 0, _jsp_string_69.length);
        } // jsp.jstl.core.IfTag END
        // NODE END: lineNumber: 107, tagClassName: com.skin.ayada.jstl.core.IfTag, tagInstanceName: _jsp_IfTag_68

        // TEXT: lineNumber: 109
        // out.write("    </div>\r\n</div>\r\n对于这种代码形式，如果希望输出符合我们的期望，就必须引入新的规则，问题是这个规则无法定义。\r\n假设，如果一个标签内的文本内容和标签处于同一行，那么我们就不处理格式，那面下面的代码依然存在问题：\r\n<div>\r\n    <div>\r\n");
        out.write(_jsp_string_71, 0, _jsp_string_71.length);

        // NODE START: lineNumber: 116, offset: 71, length: 5, tagClassName: com.skin.ayada.jstl.core.IfTag, tagInstanceName: _jsp_IfTag_72
        // <c:if test=\"${1 == 1}\">...</c:if>
        if(ExpressionUtil.getBoolean(expressionContext, "${1 == 1}")) {
            // NODE START: lineNumber: 116, offset: 72, length: 3, tagClassName: com.skin.ayada.jstl.core.IfTag, tagInstanceName: _jsp_IfTag_73
            // <c:if test=\"${1 == 1}\">...</c:if>
            if(ExpressionUtil.getBoolean(expressionContext, "${1 == 1}")) {
                // TEXT: lineNumber: 116
                // out.write("<p>hello</p>");
                out.write(_jsp_string_74, 0, _jsp_string_74.length);
            } // jsp.jstl.core.IfTag END
            // NODE END: lineNumber: 116, tagClassName: com.skin.ayada.jstl.core.IfTag, tagInstanceName: _jsp_IfTag_73

        } // jsp.jstl.core.IfTag END
        // NODE END: lineNumber: 116, tagClassName: com.skin.ayada.jstl.core.IfTag, tagInstanceName: _jsp_IfTag_72

        // TEXT: lineNumber: 116
        // out.write("    </div>\r\n</div>");
        out.write(_jsp_string_77, 0, _jsp_string_77.length);

        out.flush();
        jspWriter.flush();
    }

    public static final char[] _jsp_string_3 = "\r\n### 1\r\n    <p>\r\n".toCharArray();
    public static final char[] _jsp_string_5 = "Hello world !".toCharArray();
    public static final char[] _jsp_string_7 = "    </p>\r\n\r\n### 2\r\n    <p>\r\n            ".toCharArray();
    public static final char[] _jsp_string_10 = "Hello world !".toCharArray();
    public static final char[] _jsp_string_13 = "\r\n    </p>\r\n\r\n".toCharArray();
    public static final char[] _jsp_string_14 = "<div>\r\n    <h3>".toCharArray();
    public static final char[] _jsp_string_16 = "/include/header.jsp</h3>\r\n    <div class=\"wrap\">header</div>\r\n</div>\r\n".toCharArray();
    public static final char[] _jsp_string_19 = "\r\n".toCharArray();
    public static final char[] _jsp_string_24 = "\r\n<h1>header</h1>\r\n<p>Clip Test</p>\r\n".toCharArray();
    public static final char[] _jsp_string_27 = "   #### 1\r\n".toCharArray();
    public static final char[] _jsp_string_29 = "    <p>".toCharArray();
    public static final char[] _jsp_string_31 = "</p>\r\n".toCharArray();
    public static final char[] _jsp_string_33 = "### 2\r\n".toCharArray();
    public static final char[] _jsp_string_36 = "        Hello !\r\n".toCharArray();
    public static final char[] _jsp_string_39 = "        Hi !\r\n".toCharArray();
    public static final char[] _jsp_string_42 = "\r\n### 3\r\n<p>test</p>\r\n\r\n\r\n<p>test</p>\r\n### 4\r\n\r\n".toCharArray();
    public static final char[] _jsp_string_45 = "<p>".toCharArray();
    public static final char[] _jsp_string_48 = "</p>\r\n".toCharArray();
    public static final char[] _jsp_string_51 = "\r\n### 5\r\n".toCharArray();
    public static final char[] _jsp_string_54 = "<p>".toCharArray();
    public static final char[] _jsp_string_57 = "</p>\r\n".toCharArray();
    public static final char[] _jsp_string_60 = "\r\nc:remove的bodyContent为empty, 之前的版本有一个bug, 成对闭合的标签如果bodyContent为empty的时候，会忽略掉结束标签后面的所有回车。如果写成自关闭则没有这个问题。\r\n该问题已经修复。\r\n".toCharArray();
    public static final char[] _jsp_string_63 = "\r\n\r\n\r\n## 6\r\n这是一个格式处理的测试页面，测试编译程序的clip函数是否正确。\r\n格式处理必须有一个规则，这样编译程序才知道如何处理空格和回车。编译程序对标签的处理规则：\r\n1. jsp指令、jsp生命、jsp脚本、Ayada指令，都会统一删除掉前导空格和后缀回车。不支持配置，统一处理。\r\n2. 标签配置增加ignore-whitespace选项，可选值[true|false]，如果是true，删除掉前导空格和后面的回车。默认是true。t:import指令对应的属性是ignoreWhitespace。\r\n前导空格包括空格和\\t符。\r\n后缀回车包括\\r和\\n。只删除第一个回车。\r\n\r\n编译程序在编译出来所有节点列表之后，会对节点列表进行两次扫描：\r\n1. 第一次扫描，根据标签的ignoreWhitespace定义决定是否对标签做格式处理。\r\n   如果ignoreWhitespace为true，则删除标签的前导空格，前导空格是指标签前面的第一个文本节点的尾空格。\r\n   删除标签之后的第一个回车换行符。标签的开始节点和结束节点都按照这个的规则处理。所有的jsp指令、脚本、声明也按照这个规则处理。\r\n\r\n2. 第二次扫描，根据标签的bodyContent定义清除标签内的文本节点或者。\r\n\r\n总的原则是：标签或者脚本所占的行不输出。即：把标签或者脚本所占的行删除之后就是最终输出的格式。\r\n\r\n这个规则会导致一些输出可能不符合编写者的意图，例如：\r\n<div>\r\n    <div>\r\n".toCharArray();
    public static final char[] _jsp_string_65 = "<p>hello</p>".toCharArray();
    public static final char[] _jsp_string_67 = "    </div>\r\n</div>\r\n我们希望的输出格式应该是如下的样子：\r\n<div>\r\n    <div>\r\n        <p>hello</p>\r\n    </div>\r\n</div>\r\n但由于上面对格式的处理规则：标签必须独占一行，导致输出是下面的样子：\r\n<div>\r\n    <div>\r\n<p>hello</p>    </div>\r\n</div>\r\n一个简单的解决办法是把标签独占一行，改成如下的样子：\r\n<div>\r\n    <div>\r\n".toCharArray();
    public static final char[] _jsp_string_69 = "        <p>hello</p>\r\n".toCharArray();
    public static final char[] _jsp_string_71 = "    </div>\r\n</div>\r\n对于这种代码形式，如果希望输出符合我们的期望，就必须引入新的规则，问题是这个规则无法定义。\r\n假设，如果一个标签内的文本内容和标签处于同一行，那么我们就不处理格式，那面下面的代码依然存在问题：\r\n<div>\r\n    <div>\r\n".toCharArray();
    public static final char[] _jsp_string_74 = "<p>hello</p>".toCharArray();
    public static final char[] _jsp_string_77 = "    </div>\r\n</div>".toCharArray();

}
