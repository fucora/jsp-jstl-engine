spring集成可以采用两种方案
# 第一种方案
1. 首先配置spring, 让spring使用jsp方式解析视图
    <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/template"/>
        <property name="suffix" value=".jsp"/>
    </bean>

2. 第二步，配置模板过滤器拦截所有/WEB-INF/template/*的请求
    <filter>
        <filter-name>TemplateFilter</filter-name>
        <filter-class>com.skin.ayada.web.filter.TemplateFilter</filter-class>
        <init-param>
            <param-name>home</param-name>
            <param-value>contextPath:/WEB-INF/template</param-value>
        </init-param>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>ignoreJspTag</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>jspWork</param-name>
            <param-value>contextPath:/WEB-INF/ayada</param-value>
        </init-param>
        <init-param>
            <param-name>sourceFactoryClass</param-name>
            <param-value>com.skin.ayada.source.DefaultSourceFactory</param-value>
        </init-param>
        <init-param>
            <param-name>templateFactoryClass</param-name>
            <param-value>com.skin.ayada.template.JspTemplateFactory</param-value>
        </init-param>
        <init-param>
            <param-name>expressionFactoryClass</param-name>
            <param-value>com.skin.ayada.runtime.DefaultExpressionFactory</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>TemplateFilter</filter-name>
        <url-pattern>/WEB-INF/template/*</url-pattern>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>

WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();
ServletContext servletContext = webApplicationContext.getServletContext();

# 第二种方案
1. 在spring中配置模板上下文，并配置ViewResolver
    <!--
        home - 模板文件根目录 SourceFactory将从这个目录加载模板
        prefix - 路径前缀，ViewResolver中配置的前缀
        encoding - 模板文件编码
        ignoreJspTag - 是否忽略jsp脚本
        sourcePattern - 允许的模板扩展名，其他的扩展名将认为是普通文本
        jspWork - 编译模式有效，编译生成的文件目录
        sourceFactoryClass - 源码提供者
        templateFactoryClass - 模板提供者，TemplateFactory是解释模式，JspTemplateFactory是编译模式
        expressionFactoryClass - el表达式提供者，DefaultExpressionFactory使用ognl
    -->
    <bean id="dispatcherFactory" class="com.skin.ayada.web.spring.DispatcherFactory">
        <property name="home" value="contextPath:/WEB-INF/template"/>
        <property name="prefix" value="/WEB-INF/template"/>
        <property name="encoding" value="utf-8"/>
        <property name="ignoreJspTag" value="true"/>
        <property name="jspWork" value="contextPath:/WEB-INF/ayada"/>
        <property name="sourceFactoryClass" value="com.skin.ayada.source.DefaultSourceFactory"/>
        <property name="templateFactoryClass" value="com.skin.ayada.template.JspTemplateFactory"/>
        <property name="expressionFactoryClass" value="com.skin.ayada.runtime.DefaultExpressionFactory"/>
    </bean>
    <bean id="templateDispatcher" factory-bean="dispatcherFactory" factory-method="create"/>

    <bean id="viewResolver" class="com.skin.ayada.web.spring.AyadaViewResolver">
        <property name="templateDispatcher" ref="templateDispatcher"/>
        <property name="viewClass" value="com.skin.ayada.web.spring.AyadaView"/>
        <property name="prefix" value="/WEB-INF/template"/>
        <property name="suffix" value=".jsp"/>
    </bean>

2. ayada本身并不提供与其他框架的集成，但是提供了集成的源码，请将spring相关的代码放到自己的应用中。
下面是spring集成相关的ViewResolver源码。

package com.skin.ayada.web.spring;

import javax.servlet.ServletContext;

import org.springframework.web.context.ServletContextAware;

import com.skin.ayada.template.TemplateContext;
import com.skin.ayada.web.TemplateContextFactory;
import com.skin.ayada.web.TemplateDispatcher;

public class DispatcherFactory implements ServletContextAware {
    private String name;
    private String home;
    private String prefix;
    private String encoding;
    private String contentType;
    private String sourcePattern;
    private String jspWork;
    private String zipFile;
    private String ignoreJspTag;
    private String classPath;
    private String sourceFactoryClass;
    private String templateFactoryClass;
    private String expressionFactoryClass;
    private ServletContext servletContext;

    /**
     * @return TemplateDispatcher
     */
    public TemplateDispatcher create() {
        TemplateContextFactory contextFactory = new TemplateContextFactory();
        contextFactory.setHome(home);
        contextFactory.setSourcePattern(this.getSourcePattern());
        contextFactory.setJspWork(this.getJspWork());
        contextFactory.setZipFile(this.getZipFile());
        contextFactory.setIgnoreJspTag(this.getIgnoreJspTag());
        contextFactory.setClassPath(this.getClassPath());
        contextFactory.setSourceFactoryClass(this.getSourceFactoryClass());
        contextFactory.setTemplateFactoryClass(this.getTemplateFactoryClass());
        contextFactory.setExpressionFactoryClass(this.getExpressionFactoryClass());

        TemplateContext templateContext = contextFactory.create();
        TemplateDispatcher templateDispatcher = new TemplateDispatcher();
        templateDispatcher.setName(this.name);
        templateDispatcher.setPrefix(this.prefix);
        templateDispatcher.setEncoding(this.encoding);
        templateDispatcher.setContentType(contentType);
        templateDispatcher.setServletContext(this.servletContext);
        templateDispatcher.setTemplateContext(templateContext);

        if(this.name != null) {
            this.servletContext.setAttribute(this.name, templateDispatcher);
        }
        return templateDispatcher;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name){
        this.name = name;
    }

    /**
     * @return the name
     */
    public String getName() {
        return this.name;
    }

    /**
     * @param home the home to set
     */
    public void setHome(String home) {
        this.home = home;
    }

    /**
     * @return the home
     */
    public String getHome() {
        return this.home;
    }

    /**
     * @param prefix the prefix to set
     */
    public void setPrefix(String prefix) {
        this.prefix = prefix;
    }

    /**
     * @return the prefix
     */
    public String getPrefix() {
        return this.prefix;
    }

    /**
     * @param encoding the encoding to set
     */
    public void setEncoding(String encoding) {
        this.encoding = encoding;
    }

    /**
     * @return the encoding
     */
    public String getEncoding() {
        return this.encoding;
    }

    /**
     * @param contentType the contentType to set
     */
    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    /**
     * @return the contentType
     */
    public String getContentType() {
        return this.contentType;
    }

    /**
     * @param sourcePattern the sourcePattern to set
     */
    public void setSourcePattern(String sourcePattern) {
        this.sourcePattern = sourcePattern;
    }

    /**
     * @return the sourcePattern
     */
    public String getSourcePattern() {
        return this.sourcePattern;
    }

    /**
     * @param jspWork the jspWork to set
     */
    public void setJspWork(String jspWork) {
        this.jspWork = jspWork;
    }

    /**
     * @return the jspWork
     */
    public String getJspWork() {
        return this.jspWork;
    }

    /**
     * @param ignoreJspTag the ignoreJspTag to set
     */
    public void setIgnoreJspTag(String ignoreJspTag) {
        this.ignoreJspTag = ignoreJspTag;
    }

    /**
     * @return the ignoreJspTag
     */
    public String getIgnoreJspTag() {
        return this.ignoreJspTag;
    }

    /**
     * @param zipFile the zipFile to set
     */
    public void setZipFile(String zipFile) {
        this.zipFile = zipFile;
    }

    /**
     * @return the zipFile
     */
    public String getZipFile() {
        return this.zipFile;
    }

    /**
     * @param classPath the classPath to set
     */
    public void setClassPath(String classPath) {
        this.classPath = classPath;
    }

    /**
     * @return the classPath
     */
    public String getClassPath() {
        return this.classPath;
    }

    /**
     * @param sourceFactoryClass the sourceFactoryClass to set
     */
    public void setSourceFactoryClass(String sourceFactoryClass) {
        this.sourceFactoryClass = sourceFactoryClass;
    }

    /**
     * @return the sourceFactoryClass
     */
    public String getSourceFactoryClass() {
        return this.sourceFactoryClass;
    }

    /**
     * @param templateFactoryClass the templateFactoryClass to set
     */
    public void setTemplateFactoryClass(String templateFactoryClass) {
        this.templateFactoryClass = templateFactoryClass;
    }

    /**
     * @return the templateFactoryClass
     */
    public String getTemplateFactoryClass() {
        return this.templateFactoryClass;
    }

    /**
     * @param expressionFactoryClass the expressionFactoryClass to set
     */
    public void setExpressionFactoryClass(String expressionFactoryClass) {
        this.expressionFactoryClass = expressionFactoryClass;
    }

    /**
     * @return the expressionFactoryClass
     */
    public String getExpressionFactoryClass() {
        return this.expressionFactoryClass;
    }

    /**
     * @param servletContext the servletContext to set
     */
    public void setServletContext(ServletContext servletContext) {
        this.servletContext = servletContext;
    }

    /**
     * @return the servletContext
     */
    public ServletContext getServletContext() {
        return this.servletContext;
    }
}

import org.springframework.web.servlet.view.AbstractTemplateViewResolver;
import org.springframework.web.servlet.view.AbstractUrlBasedView;
import com.skin.ayada.template.TemplateContext;

public class AyadaViewResolver extends AbstractTemplateViewResolver {
    private TemplateDispatcher templateDispatcher;

    public AyadaViewResolver() {
        setViewClass(AyadaView.class);
    }

    /**
     * @param viewName
     * @return AbstractUrlBasedView
     * @throws Exception
     */
    protected AbstractUrlBasedView buildView(String viewName) throws Exception {
        AyadaView ayadaView = (AyadaView)(super.buildView(viewName));
        ayadaView.setTemplateDispatcher(this.templateDispatcher);
        return ayadaView;
    }

    /**
     * @return AyadaView
     */
    protected Class<AyadaView> requiredViewClass() {
        return AyadaView.class;
    }

    /**
     * @return the templateDispatcher
     */
    public TemplateDispatcher getTemplateDispatcher() {
        return this.templateDispatcher;
    }

    /**
     * @param templateDispatcher the templateDispatcher to set
     */
    public void setTemplateDispatcher(TemplateDispatcher templateDispatcher) {
        this.templateDispatcher = templateDispatcher;
    }
}

import java.util.Map;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.NoSuchBeanDefinitionException;
import org.springframework.beans.factory.NoUniqueBeanDefinitionException;
import org.springframework.web.context.ContextLoader;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.servlet.view.AbstractTemplateView;
import com.skin.ayada.template.TemplateContext;
import com.skin.ayada.web.TemplateDispatcher;

public class AyadaView extends AbstractTemplateView {
    private TemplateDispatcher templateDispatcher;

    public AyadaView() {
    }

    protected void renderMergedTemplateModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response)
        throws NoSuchBeanDefinitionException, NoUniqueBeanDefinitionException {
        if(this.templateDispatcher == null) {
            this.templateDispatcher = (TemplateDispatcher)(this.getApplicationContext().getBean("templateDispatcher"));
        }

        try {
            this.templateDispatcher.dispatch(request, response, this.getUrl());
        }
        catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @return the templateDispatcher
     */
    public TemplateDispatcher getTemplateDispatcher() {
        return this.templateDispatcher;
    }

    /**
     * @param templateDispatcher the templateDispatcher to set
     */
    public void setTemplateDispatcher(TemplateDispatcher templateDispatcher) {
        this.templateDispatcher = templateDispatcher;
    }
}
